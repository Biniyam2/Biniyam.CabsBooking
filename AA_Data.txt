using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace JOIN_Data.Attributes
{
    public class IgnoreLoggingAttribute : Attribute
    {
    }
}
using JOIN_Data.Models.CoreModels;
using JOIN_Data.Utils;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace JOIN_Data.Authorization
{
    public class ActiveUserHandler : AuthorizationHandler<ActiveUserRequirement>
    {

        IHttpContextAccessor contextAccessor;
        public ActiveUserHandler(IHttpContextAccessor contextAccessor)
        {
            this.contextAccessor = contextAccessor;
        }
        protected override Task HandleRequirementAsync(AuthorizationHandlerContext context, ActiveUserRequirement requirement)
        {
            /*
            string loginName = AppUtils.GetLoginName(contextAccessor.HttpContext);
            ApplicationUser user = userRepository.GetUserByName(loginName, false);
            if (user != null && user.Active)
            {
                      context.Succeed(requirement);
                      return Task.CompletedTask;
            }
            */
            return Task.CompletedTask;
        }
    }
}
using Microsoft.AspNetCore.Authorization;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace JOIN_Data.Authorization
{
    public class ActiveUserRequirement : IAuthorizationRequirement
    {
    }
}
using JOIN_Data.Models.CoreModels;
using JOIN_Data.Utils;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace JOIN_Data.Authorization
{
    public class AdminRoleHandler : AuthorizationHandler<AdminRoleRequirement>
    {
        IHttpContextAccessor contextAccessor;
        public AdminRoleHandler(IHttpContextAccessor contextAccessor)
        {
            this.contextAccessor = contextAccessor;
        }
        protected override Task HandleRequirementAsync(AuthorizationHandlerContext context, AdminRoleRequirement requirement)
        {
            /*
string loginName = AppUtils.GetLoginName(contextAccessor.HttpContext);
ApplicationUser user = userRepository.GetUserByName(loginName, false);
if (user != null && user.Active && user.IsAdmin)
{
context.Succeed(requirement);
return Task.CompletedTask;
}
*/
            return Task.CompletedTask;
        }
    }
}
using Microsoft.AspNetCore.Authorization;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace JOIN_Data.Authorization
{
    public class AdminRoleRequirement : IAuthorizationRequirement
    {
    }
}
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.Extensions.Caching.Memory;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace JOIN_Data.Authorization
{
    public class MemoryCacheTicketStore : ITicketStore
    {
        private const string KeyPrefix = "_JAGCNet_AuthSessionStore_";
        private IMemoryCache _cache;
        private readonly int sessionTimeout;

        public MemoryCacheTicketStore(int sessionTimeout)
        {
            _cache = new MemoryCache(new MemoryCacheOptions());
            this.sessionTimeout = sessionTimeout;
        }

        public async Task<string> StoreAsync(AuthenticationTicket ticket)
        {
            var guid = Guid.NewGuid();
            var key = KeyPrefix + guid.ToString();
            await RenewAsync(key, ticket);
            //return Task.FromResult(key);
            return key;
        }

        public Task RenewAsync(string key, AuthenticationTicket ticket)
        {
            var options = new MemoryCacheEntryOptions
            {
                Priority = CacheItemPriority.NeverRemove,

            };
            //options.SetAbsoluteExpiration(TimeSpan.FromHours(8));
            options.SetSlidingExpiration(TimeSpan.FromMinutes(sessionTimeout));

            //var expiresUtc = ticket.Properties.ExpiresUtc;
            //if (expiresUtc.HasValue)
            //{
            //    options.SetAbsoluteExpiration(expiresUtc.Value);
            //}
            _cache.Set(key, ticket, options);
            //return Task.CompletedTask;
            return Task.FromResult(0);
        }

        public Task<AuthenticationTicket> RetrieveAsync(string key)
        {
            _cache.TryGetValue(key, out AuthenticationTicket ticket);
            return Task.FromResult(ticket);
        }

        public Task RemoveAsync(string key)
        {
            _cache.Remove(key);
            //return Task.CompletedTask;
            return Task.FromResult(0);
        }
    }
}
using Microsoft.AspNetCore.DataProtection;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace CommonUtil.DataProtection
{
    public class DecryptConnectionString : IDecryptConnectionString
    {
        private readonly IDataProtectionProvider _dataProtectionProvider;
        public DecryptConnectionString(IDataProtectionProvider dataProtectionProvider)
        {
            _dataProtectionProvider = dataProtectionProvider;
        }
        public string GetConnctionString(string name, string data)
        {
            var protector = _dataProtectionProvider.CreateProtector(name.ToUpper());
            return protector.Unprotect(data);
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace CommonUtil.DataProtection
{
    public interface IDecryptConnectionString
    {
        string GetConnctionString(string name, string data);
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace JOIN_Data.Enums
{
    public enum AlertTypes
    {
        Okay,
        Information,
        Failed,
        Warnning
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace JOIN_Data.Enums;

public enum AppParts
{
    Applications = 1,
    Board = 2,
    Sections = 3,
    Category = 4,
    Question = 5,
    Validation = 6
}
namespace JOIN_Data.Enums
{
    public enum KeywordType
    {

        SubjectMatter = 1,
        ActionType = 2,
        CloseoutStatus = 3,
        Actions = 4,
        Component = 5,
        SSJA = 6,
        IO = 7,
        Supervisor = 8,
        ApplicableRule = 9
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Security.Principal;
using System.Threading.Tasks;

namespace JOIN_Data.Extensions
{
    public static class ClaimsIdentityExtensions
    {
        public static string GetClaimValue(this ClaimsIdentity claimsIdentity, string claimType)
        {
            var claim = claimsIdentity.Claims.FirstOrDefault(x => x.Type == claimType);

            return (claim != null) ? claim.Value : string.Empty;
        }
        public static int GetClaimValueInt(this ClaimsIdentity claimsIdentity, string claimType)
        {
            var claim = claimsIdentity.Claims.FirstOrDefault(x => x.Type == claimType);

            return (claim != null) ? Convert.ToInt32(claim.Value) : 0;
        }
    }
}
using JOIN_Data.Utils;
using System;
using System.Linq;
using System.Security.Claims;

namespace JOIN_Data.Extensions
{
    public static class ClaimsPrincipalExtensions
    {
        public static string GetClaimValue(this ClaimsPrincipal claimsPrincipal, string claimType)
        {
            var claim = claimsPrincipal.Claims.FirstOrDefault(x => x.Type == claimType);

            return (claim != null) ? claim.Value : string.Empty;
        }
        public static int GetClaimValueInt(this ClaimsPrincipal claimsPrincipal, string claimType)
        {
            var claim = claimsPrincipal.Claims.FirstOrDefault(x => x.Type == claimType);

            return (claim != null) ? Convert.ToInt32(claim.Value) : 0;
        }
        public static string GetJAGCProfileUUID(this ClaimsPrincipal claimsPrincipal)
        {
            return claimsPrincipal.GetClaimValue(ClaimConstants.JAGCPROFILE_UUID);
        }
        public static string GetLastLogin(this ClaimsPrincipal claimsPrincipal)
        {
            return claimsPrincipal.GetClaimValue(ClaimConstants.LAST_LOGIN);
        }
        public static bool IsITDUser(this ClaimsPrincipal claimsPrincipal)
        {
            return claimsPrincipal.GetClaimValue(ClaimConstants.IS_ITD_USER) == "True";
        }
        public static int GetApplicationUserId(this ClaimsPrincipal claimsPrincipal)
        {
            return claimsPrincipal.GetClaimValueInt(ClaimConstants.APPLICATION_USER_ID);
        }
        public static int GetApplicationProfileId(this ClaimsPrincipal claimsPrincipal)
        {
            return claimsPrincipal.GetClaimValueInt(ClaimConstants.APP_PROFILE_ID);
        }
        public static string GetFullName(this ClaimsPrincipal claimsPrincipal)
        {
            return claimsPrincipal.GetClaimValue(ClaimTypes.Name);
        }

    }
}
using Microsoft.Extensions.Caching.Distributed;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace JOIN_Data.Extensions
{
    public static class DistributedCacheExtensions
    {
        public static void SetObjectAsJson(this IDistributedCache cache, string key, object value, int expireMinutes)
        {

            if (expireMinutes > 0)
            {
                var options = new DistributedCacheEntryOptions
                {
                    SlidingExpiration = TimeSpan.FromMinutes(expireMinutes)
                };
                cache.SetString(key, JsonConvert.SerializeObject(value), options);
            }
            else
            {
                cache.SetString(key, JsonConvert.SerializeObject(value));
            }
        }

        public static T GetObjectFromJson<T>(this IDistributedCache cache, string key)
        {
            var value = cache.GetString(key);
            return value == null ? default(T) : JsonConvert.DeserializeObject<T>(value.ToString());
        }
    }
}
using Microsoft.AspNetCore.Http;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace JOIN_Data.Extensions
{
    public static class HttpRequestExtensions
    {
        private const string RequestedWithHeader = "X-Requested-With";
        private const string XmlHttpRequest = "XMLHttpRequest";

        public static bool IsAjaxRequest(this HttpRequest request)
        {
            if (request == null)
            {
                throw new ArgumentNullException("request");
            }

            if (request.Headers != null)
            {
                return request.Headers[RequestedWithHeader] == XmlHttpRequest;
            }

            return false;
        }

    }
}
using Microsoft.AspNetCore.Http;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace JOIN_Data.Extensions
{
    public static class SessionExtensions
    {
        public static void SetObjectAsJson(this ISession session, string key, object value)
        {
            session.SetString(key, JsonConvert.SerializeObject(value));
        }

        public static T GetObjectFromJson<T>(this ISession session, string key)
        {
            var value = session.GetString(key);
            return value == null ? default(T) : JsonConvert.DeserializeObject<T>(value.ToString());
        }
    }
}

namespace CommonUtil.ListViews
{
    public enum ActiveFilterFlag
    {

        Active = 1,
        Inactive = 2,
        Both = 3
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace CommonUtil.ListViews
{
    public class CategoryOption
    {
        public string FieldName { get; set; }
        public string DisplayValue { get; set; }

    }
}
namespace CommonUtil.ListViews
{
    public class CheckboxListItem
    {
        public int Id { get; set; }
        public string Label { get; set; }
        public bool IsSelected { get; set; }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace JOIN_Data.ListViews;

public class ColumnGroup
{
    public int SortOrder { get; set; }
    public string Title { get; set; }

    public ColumnGroup(int sortOrder, string title)
    {
        this.SortOrder = sortOrder;
        this.Title = title;
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace CommonUtil.ListViews
{
    public enum DisplayMode
    {
        Table = 1,
        VerticalSplit = 2
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace CommonUtil.ListViews
{
    public class ExtSearchFilter
    {
        public string FieldName { get; set; }
        public string Value1 { get; set; }
        public string Value2 { get; set; }
        public string Operator { get; set; }
        public bool IsValidOperator()
        {
            return Operator.Equals(">=") || Operator.Equals(">") || Operator.Equals("<=") || Operator.Equals("<") || Operator.Equals("=");
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace CommonUtil.ListViews
{
    public class FieldFilter
    {
        public string FieldName { get; set; }
        public List<string> Values { get; set; }
        public bool ShowAsTag { get; set; } = true;
        public FieldFilter()
        {
            Values = new List<string>();
        }
        public string GetValueString()
        {
            string values = "[";
            int i = 0;
            foreach (var v in Values)
            {
                if (i > 0)
                {
                    values += ",";
                }
                values += "\"" + v + "\"";
                i++;
            }
            values += "]";
            return values;
        }
        public string GetValueAsTags()
        {
            if (Values == null)
                return "";
            string values = "<div class='d-flex'>";
            int i = 0;
            foreach (var v in Values)
            {
                values += "<div class='view-tag'>" + v + "<i class='ms-1 bi bi-x-circle' data-field-name='" + FieldName + "' data-field-val='" + v + "' onclick='removeFilterValue(this)'></i></div>";
                i++;
            }
            values += "</div>";
            return values;
        }
    }
}
using JOIN_Data.Models.UtilityModels;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace CommonUtil.ListViews
{
    public interface IListView
    {
        string GetTitle();
        string GetKey();
        bool IsExportable();
        List<UserViewColumn> GetDefaultColumns();
        List<UserViewColumn> GetDisplayableColumns();
        List<UserViewColumn> GetDisplayColumns();
        List<UserViewColumn> GetExportColumns();
        List<UserViewColumn> GetRequiredColumns();
        UserListView UserListView { get; set; }
        string CategorizedColumn { get; set; }
        bool IsRequiredColumn(string columnName);
        string GetCategoryValue(PropertyAccessor record);
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace CommonUtil.ListViews
{
    public interface IListViewFactory
    {
        ListView<TViewModel, TRepositoryModel> GetListView<TViewModel, TRepositoryModel>(string key);
        IListView GetListView(string key);
    }
}
using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Spreadsheet;
using JOIN_Data.ListViews;
using JOIN_Data.Models.CoreModels;
using JOIN_Data.Models.UtilityModels;
using JOIN_Data.Services.Interfaces;
using JOIN_Data.Utils;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Linq.Dynamic.Core;
using System.Linq.Expressions;
using System.Threading.Tasks;


namespace CommonUtil.ListViews
{
    public class ListView<TViewModel, TRepositoryModel> : IListView
    {
        public string ViewTitle { get; set; }
        public string ExportTitle { get; set; }
        public bool ShowTitleAsPageTitle { get; set; }
        public string ViewKey { get; set; }
        public bool AllowAddUser { get; set; }
        public bool AllowCreate { get; set; }
        public bool AllowSearch { get; set; }
        public bool AllowExtSearch { get; set; }
        public bool AllowDelete { get; set; }
        public bool AllowSelection { get; set; }
        public bool AllowExport { get; set; }
        public bool AllowActiveFilter { get; set; }
        public bool AllowCategorize { get; set; }
        public string CurrentCategory { get; set; }
        public string CategorizedColumn { get; set; }
        public bool ShowCategoryTotals { get; set; }

        public bool IsUsersView { get; set; }
        public bool IsCustomizable { get; set; }
        public string ActiveIcon { get; set; } = IconConstants.ACTIVE_ICON;
        public string InactiveIcon { get; set; } = IconConstants.INACTIVE_ICON_DANGER;

        public string ExportActionName { get; set; } = "Export";
        public string NewActionName { get; set; } = "New";
        public string EditActionName { get; set; } = "Edit";
        public string SaveActionName { get; set; } = "Save";
        public string OuterContainerId { get; set; }
        public string ListDataContainerId { get; set; }
        public bool OpenRecordInPopup { get; set; }
        public bool IsInlinePopup { get; set; }
        public bool OpenRecordInPreview { get; set; }
        public bool IsJavascriptPreview { get; set; }
        public string JavascriptPreviewFunction { get; set; }
        public string RecordIdParam { get; set; }
        public string LinkTarget { get; set; }
        public string NewButtonLabel { get; set; }
        public string NewButtonFunc { get; set; }
        public string NewUserButtonLabel { get; set; } = "ADD NEW USER";
        public string NewUserButtonClass { get; set; } = "btn-outline-primary";
        public string DetailsActionName { get; set; }
        public string ModalSize { get; set; }
        public string DefaultSortColumn { get; set; }
        public bool UpdateBrowserState { get; set; }
        public List<ColumnGroup> ColumnGroups { get; set; }
        public List<ViewColumn<TViewModel, TRepositoryModel>> ViewColumns { get; set; }
        public Type RepositoryModelType { get; set; }
        public Expression<Func<TRepositoryModel, bool>> DefaultCriteria;
        public string KeyColumn { get; set; } = "Id";
        public int VSLeftColumnWidth { get; set; }
        public string VSLeftColumnHeight { get; set; }
        public bool HideTopPanel { get; set; }
        public bool ShowTitle { get; set; }
        public bool ShowGrandTotalInDisplay { get; set; }
        public bool ShowGrandTotalInExport { get; set; }
        public bool ShowSearchCriteria { get; set; }
        public bool AllowChangeDisplay { get; set; }
        public string TableStyleClass { get; set; }
        public string TopPanelStyleClass { get; set; }

        public List<char> charList = new List<char>();
        public UserListView UserListView { get; set; }
        public List<CategoryOption> CategoryOptions { get; set; }

        public ListView()
        {
            init();
        }
        public ListView(string key)
        {
            ViewKey = key;
            init();
        }
        public ListView(string key, Type repositoryModelType)
        {
            ViewKey = key;
            RepositoryModelType = repositoryModelType;
            init();
        }
        public string GetTitle()
        {
            return ViewTitle;
        }
        public string GetKey()
        {
            return ViewKey;
        }
        public bool IsExportable()
        {
            return AllowExport;
        }
        public bool IsCategorized { get => AllowCategorize && !string.IsNullOrEmpty(CurrentCategory); }

        public bool IsRequiredColumn(string columnName)
        {
            var col = ExportableColumns.FirstOrDefault(c => c.FieldName == columnName);
            return col == null ? false : col.RequiredColumn;
        }
        public List<UserViewColumn> GetDefaultColumns()
        {
            List<UserViewColumn> list = new List<UserViewColumn>();
            foreach (var vc in DisplayableColumns)
            {
                if (vc.ShowByDefault)
                    list.Add(vc.GetUserViewColumn());
            }
            return list;
        }
        public ColumnGroup AddColumnGroup(int sortOrder, string title)
        {
            ColumnGroup colGroup = new(sortOrder, title);
            if (ColumnGroups is null)
            {
                ColumnGroups = new();
            }
            ColumnGroups.Add(colGroup);
            return colGroup;
        }
        public List<UserViewColumn> GetDisplayableColumns()
        {
            List<UserViewColumn> list = new List<UserViewColumn>();
            foreach (var vc in DisplayableColumns)
            {
                list.Add(vc.GetUserViewColumn());
            }
            return list;
        }
        public List<UserViewColumn> GetDisplayColumns()
        {
            List<UserViewColumn> list = new List<UserViewColumn>();
            foreach (var vc in DisplayableColumns)
            {
                list.Add(vc.GetUserViewColumn());
            }
            return list;
        }
        public List<UserViewColumn> GetExportColumns()
        {
            List<UserViewColumn> list = new List<UserViewColumn>();
            foreach (var vc in ExportableColumns)
            {
                list.Add(vc.GetUserViewColumn());
            }
            return list;
        }
        public List<UserViewColumn> GetRequiredColumns()
        {
            List<UserViewColumn> list = new List<UserViewColumn>();
            foreach (var vc in RequiredColumns)
            {
                list.Add(vc.GetUserViewColumn());
            }
            return list;
        }
        public string GetCategoryValue(PropertyAccessor record)
        {
            if (AllowCategorize && !string.IsNullOrEmpty(CategorizedColumn))
            {
                var categoryVal = record.GetPropertyValue(CategorizedColumn);
                CurrentCategory = categoryVal == null ? "-Not Categorized-" : categoryVal.ToString();
                return CurrentCategory;
            }
            return null;
        }
        public string GetCategoryValue(TViewModel record)
        {
            if (AllowCategorize && !string.IsNullOrEmpty(CategorizedColumn))
            {
                var categoryVal = (record as PropertyAccessor).GetPropertyValue(CategorizedColumn);
                CurrentCategory = categoryVal == null ? "-Not Categorized-" : categoryVal.ToString();
                return CurrentCategory;
            }
            return null;
        }
        private void init()
        {
            AllowCreate = false;
            AllowSearch = true;
            AllowExtSearch = true;
            AllowExport = true;
            IsInlinePopup = false;
            ShowTitleAsPageTitle = false;
            HideTopPanel = false;
            ShowTitle = true;
            ShowSearchCriteria = true;
            VSLeftColumnWidth = 20;
            OuterContainerId = ViewKey + "_listViewOuterContainer";
            ListDataContainerId = ViewKey + "_listViewDataContainer";
            RecordIdParam = "id";
            DetailsActionName = "Details";
            NewButtonLabel = "New Record";
            LinkTarget = "_self";
            IsJavascriptPreview = false;
            //TableStyleClass = "table table-bordered table-sm list-view-table";
            TableStyleClass = "table list-view-table";
            //TopPanelStyleClass = "row bg-light border";
            TopPanelStyleClass = "row border-bottom";
            ModalSize = ModalSizeConstants.DEFAULT;
            ViewColumns = new List<ViewColumn<TViewModel, TRepositoryModel>>();
            CategoryOptions = new List<CategoryOption>();
        }
        public void AddViewColumn(ViewColumn<TViewModel, TRepositoryModel> column)
        {
            ViewColumns.Add(column);
        }
        public void RemoveViewColumn(string columnName)
        {
            ViewColumns.Remove(ViewColumns.FirstOrDefault(c => c.FieldName == columnName));
        }
        public ViewColumn<TViewModel, TRepositoryModel> AddViewColumn(string fieldName, int width, bool isDefault = true)
        {
            ViewColumn<TViewModel, TRepositoryModel> col = new ViewColumn<TViewModel, TRepositoryModel>(fieldName, width);
            col.ShowByDefault = isDefault;
            ViewColumns.Add(col);
            return col;
        }
        public ViewColumn<TViewModel, TRepositoryModel> AddExportOnlyColumn(string fieldName)
        {
            var col = AddViewColumn(fieldName, 10);
            col.AllowSearch = false;
            col.ShowInView = false;
            col.AllowExport = true;
            return col;
        }
        public ViewColumn<TViewModel, TRepositoryModel> AddDisplayOnlyColumn(string fieldName, int width, bool isDefault = true)
        {
            var col = AddViewColumn(fieldName, width);
            col.ShowByDefault = isDefault;
            col.AllowSearch = false;
            col.AllowExport = false;
            col.AllowExtSearch = false;
            return col;
        }

        public void AddCategoryOption(string field, string displayValue)
        {
            CategoryOptions.Add(new CategoryOption() { FieldName = field, DisplayValue = displayValue });
        }
        public string GetTableContainerClass()
        {
            return ShowTitleAsPageTitle ? "card-body" : "";
        }
        public bool IsSelectable
        {
            get
            {
                return AllowDelete || AllowSelection;
            }
        }

        public List<ViewColumn<TViewModel, TRepositoryModel>> VisibleColumns
        {
            get
            {
                var columns = ViewColumns.Where(c => c.ShowInView == true).ToList();

                if (UserListView != null)
                {
                    List<ViewColumn<TViewModel, TRepositoryModel>> userColumns = new List<ViewColumn<TViewModel, TRepositoryModel>>();
                    foreach (var col in UserListView.DisplayColumns.OrderBy(c => c.SortOrder))
                    {
                        var userColumn = columns.FirstOrDefault(c => c.FieldName == col.ColumnName);
                        if (userColumn != null)
                        {
                            //userColumn.Width = col.Width;
                            userColumns.Add(userColumn);
                        }
                    }
                    return userColumns;
                }
                return columns.Where(c => c.ShowByDefault).ToList();
            }
        }

        public List<ViewColumn<TViewModel, TRepositoryModel>> DisplayableColumns
        {
            get
            {
                return ViewColumns.Where(c => c.ShowInView == true).ToList();
            }
        }

        public List<ViewColumn<TViewModel, TRepositoryModel>> ExportableColumns
        {
            get
            {
                return ViewColumns.Where(c => c.AllowExport == true).ToList();
            }
        }
        public List<ViewColumn<TViewModel, TRepositoryModel>> RequiredColumns
        {
            get
            {
                return ViewColumns.Where(c => c.RequiredColumn == true).ToList();
            }
        }
        public List<ViewColumn<TViewModel, TRepositoryModel>> ExtSearchColumns
        {
            get
            {
                return ViewColumns.Where(c => c.AllowExtSearch == true && AllowSearch == true).ToList();
            }
        }
        public List<ViewColumn<TViewModel, TRepositoryModel>> SearchableColumns
        {
            get
            {
                return ViewColumns.Where(c => c.AllowSearch == true).ToList();
            }
        }

        public string VSLeftColumnStyle
        {
            get
            {
                //string style = "width:" + VSLeftColumnWidth + "%;float:left";
                string style = "";
                if (!string.IsNullOrEmpty(VSLeftColumnHeight))
                {
                    style += ";height:" + VSLeftColumnHeight;
                }
                return style;
            }
        }
        public string VSRightColumnStyle
        {
            get
            {
                return "width:" + (100 - VSLeftColumnWidth) + "%;float:left";
            }
        }
        public string GetColumnTitle(string columnName)
        {
            var col = ViewColumns.FirstOrDefault(c => c.FieldName == columnName);
            return col?.Title;
        }
        public string GetExtSearchColumnCriteria(ExtSearchFilter filter)
        {
            var col = ViewColumns.FirstOrDefault(c => c.FieldName == filter.FieldName);
            return col?.GetExtSearchDisplayCriteria(filter);
        }
        public string GetExportTitle()
        {
            return string.IsNullOrEmpty(ExportTitle) ? ViewTitle : ExportTitle;
        }
        public ViewColumn<TViewModel, TRepositoryModel> GetViewColumn(string fieldName)
        {
            foreach (ViewColumn<TViewModel, TRepositoryModel> col in ViewColumns)
            {
                if (col.FieldName.Equals(fieldName))
                {
                    return col;
                }
            }
            return null;
        }
        public async Task<PagingInfo> CheckToggle(PagingInfo pageInfo, HttpContext context, IUserService profilesService)
        {
            if (OpenRecordInPreview && pageInfo.TogglePreview)
            {
                pageInfo = AppUtils.GetObjectFromJson<PagingInfo>(pageInfo.ViewKey, context.Session);
                var userId = AppUtils.GetCurrentUserId(context.User);
                if (!string.IsNullOrEmpty(userId))
                {
                    UserSetting setting = await profilesService.GetSettingByJAGCProfileUUIDAsync(userId, false);
                    setting.PreviewEnabled = !setting.PreviewEnabled;
                    await profilesService.UpdateAsync(setting, userId);
                    AppUtils.SetObjectAsJson(context.Session, SessionKeyConstants.USER_SETTING, setting);
                }
            }
            return pageInfo;
        }
        public async Task<bool> UpdateDisplayType(HttpContext context, IUserService profilesService)
        {
            var userId = AppUtils.GetCurrentUserId(context.User);
            if (!string.IsNullOrEmpty(userId))
            {
                UserSetting setting = await profilesService.GetSettingByJAGCProfileUUIDAsync(userId, false);
                setting.DefaultToVerticalSplitView = !setting.DefaultToVerticalSplitView;
                await profilesService.UpdateAsync(setting, userId);
                AppUtils.SetObjectAsJson(context.Session, SessionKeyConstants.USER_SETTING, setting);
                return true;
            }
            return false;
        }

        public (string displayCriteria, Expression<Func<TRepositoryModel, bool>> searchExpression) GetPredicate(PagingInfo pagingInfo)
        {
            string criteria = "";
            Expression<Func<TRepositoryModel, bool>> searchExpression = null;
            searchExpression = null;
            if (!String.IsNullOrEmpty(pagingInfo.SearchString))
            {
                criteria = "Records containing " + pagingInfo.SearchString;
                foreach (var col in SearchableColumns)
                {
                    Expression<Func<TRepositoryModel, bool>> e = col.GetTextSearchExpression(pagingInfo.SearchString);
                    if (e != null)
                    {
                        searchExpression = AddOrSearchCriteria(searchExpression, e);
                    }
                }
            }

            foreach (var fieldFilter in pagingInfo.ExtSearchFilters)
            {
                ViewColumn<TViewModel, TRepositoryModel> col = GetViewColumn(fieldFilter.FieldName);
                (string dispCriteria, Expression<Func<TRepositoryModel, bool>> e) = col.GetExtendedSearchExpression(fieldFilter);
                if (e != null)
                {
                    criteria += !String.IsNullOrEmpty(criteria) ? " AND " : "";
                    criteria += dispCriteria;
                    searchExpression = AddAndSearchCriteria(searchExpression, e);
                }
            }

            foreach (var fieldFilter in pagingInfo.FieldFilters)
            {

                ViewColumn<TViewModel, TRepositoryModel> col = GetViewColumn(fieldFilter.FieldName);
                if (col != null)
                {
                    (string dispCriteria, Expression<Func<TRepositoryModel, bool>> e) = col.GetFieldFilterExpression(fieldFilter);
                    if (e != null)
                    {
                        searchExpression = AddAndSearchCriteria(searchExpression, e);
                        criteria += !String.IsNullOrEmpty(criteria) ? " AND " : "";
                        criteria += dispCriteria;
                    }
                }
            }
            if (DefaultCriteria != null)
            {
                searchExpression = AddAndSearchCriteria(searchExpression, DefaultCriteria);
            }
            pagingInfo.DisplayCriteria = criteria;
            if (!string.IsNullOrEmpty(DefaultSortColumn))
            {
                pagingInfo.DefaultSortColumn = DefaultSortColumn;
            }
            else
            {
                pagingInfo.DefaultSortColumn = pagingInfo.SortColumn;
            }
            pagingInfo.UpdateBrowserState = UpdateBrowserState;
            return (criteria, searchExpression);
        }

        private Expression<Func<TRepositoryModel, bool>> AddAndSearchCriteria(Expression<Func<TRepositoryModel, bool>> criteria, Expression<Func<TRepositoryModel, bool>> newCriteria)
        {
            if (criteria == null)
            {
                criteria = newCriteria;
            }
            else
            {
                criteria = criteria.AndPredicate(newCriteria);
            }
            return criteria;
        }
        private Expression<Func<TRepositoryModel, bool>> AddOrSearchCriteria(Expression<Func<TRepositoryModel, bool>> criteria, Expression<Func<TRepositoryModel, bool>> newCriteria)
        {
            if (criteria == null)
            {
                criteria = newCriteria;
            }
            else
            {
                criteria = criteria.OrPredicate(newCriteria);
            }
            return criteria;
        }

        public void SetAdminViewProps(string viewTitle, string newBtnLabel, bool allowExtSearch = false)
        {
            OpenRecordInPopup = true;
            AllowExtSearch = allowExtSearch;
            NewButtonLabel = newBtnLabel;
            AllowCreate = true;
            ViewTitle = viewTitle;
        }
        public string GetExtendedSearchDropdownId()
        {
            return ViewKey + "_ExtendedSearch";
        }
        public string GetResizeContainerId()
        {
            return ViewKey + "_ResizeContainer";
        }
        public string GetModalClass()
        {
            var modalClass = "modal-dialog modal-dialog-centered ";
            switch (ModalSize)
            {
                case ModalSizeConstants.SMALL:
                    modalClass += "modal-sm";
                    break;
                case ModalSizeConstants.LARGE:
                    modalClass += "modal-lg";
                    break;
                case ModalSizeConstants.XLARGE:
                    modalClass += "modal-xl";
                    break;
            }
            return modalClass;
        }
        public string GetResizeContainerStyle(HttpContext context)
        {
            if (ShowPreview(context))
            {
                UserSetting setting = AppUtils.GetObjectFromJson<UserSetting>(SessionKeyConstants.USER_SETTING, context.Session);
                var height = 400;
                if (setting != null)
                {
                    height = setting.PreviewBarPosition;
                }
                if (height <= 0)
                {
                    height = 400;
                }

                return "height:" + height + "px;overflow-y:auto;";
            }
            return "";
        }
        public bool PreviewEnabled(HttpContext context)
        {
            UserSetting setting = AppUtils.GetObjectFromJson<UserSetting>(SessionKeyConstants.USER_SETTING, context.Session);
            if (setting != null)
            {
                return setting.PreviewEnabled;
            }
            return false;
        }
        public bool ShowPreview(HttpContext context)
        {
            bool enabled = PreviewEnabled(context);
            return enabled && OpenRecordInPreview;
        }
        public string GetPreviewContainerId()
        {
            return ViewKey + "_PreviewContainer";
        }
        public string GetPopupModalId()
        {
            return ViewKey + "_Modal";
        }
        public string GetPopupModalBodyId()
        {
            return ViewKey + "_Body";
        }
        public string GetFilterContainerId()
        {
            return ViewKey + "_filterValueContainer";
        }
        public string GetSettingModalId()
        {
            return ViewKey + "_setting_modal";
        }
        public string GetSettingModalBodyId()
        {
            return ViewKey + "_setting_body";
        }

        public string GetFilterDropdownId(string fieldName)
        {
            return ViewKey + "_" + fieldName;
        }
        public string GetActiveFilterIcon(PagingInfo pagingInfo)
        {
            if (pagingInfo.ActiveFilterFlag == null || pagingInfo.ActiveFilterFlag == ActiveFilterFlag.Active)
            {
                return ActiveIcon;
            }
            else if (pagingInfo.ActiveFilterFlag == ActiveFilterFlag.Inactive)
            {
                return InactiveIcon;
            }
            return ActiveIcon + " " + InactiveIcon;
        }
        public string GetActiveFilterTooltip(PagingInfo pagingInfo)
        {
            if (pagingInfo.ActiveFilterFlag == null || pagingInfo.ActiveFilterFlag == ActiveFilterFlag.Active)
            {
                return "Showing only active records";
            }
            else if (pagingInfo.ActiveFilterFlag == ActiveFilterFlag.Inactive)
            {
                return "Showing only inactive records";
            }
            return "Showing both active and inactive records";
        }

        public Expression<Func<TRepositoryModel, Object>> GetSortExpression(string fieldName)
        {
            ViewColumn<TViewModel, TRepositoryModel> col = GetViewColumn(fieldName);
            if (col != null)
            {
                return col.GetSortFieldExpression();
            }
            return null;

        }
        public FileStreamResult Export(ListViewModel<TViewModel, TRepositoryModel> vm, string displayCriteria)
        {
            var exportableCols = ExportableColumns;
            if (UserListView != null)
            {
                var exportCols = new List<ViewColumn<TViewModel, TRepositoryModel>>();
                foreach (var col in UserListView.ExportColumns.OrderBy(c => c.SortOrder))
                {
                    var userCol = exportableCols.FirstOrDefault(c => c.FieldName == col.ColumnName);
                    if (userCol != null)
                    {
                        exportCols.Add(userCol);
                    }
                }
                exportableCols = exportCols;
            }
            var columnCount = exportableCols.Count;

            for (char c = 'A'; c <= 'Z'; ++c)
            {
                charList.Add(c);
            }
            MemoryStream memoryStream = new();
            SpreadsheetDocument spreadsheetDocument = SpreadsheetDocument.Create(memoryStream, SpreadsheetDocumentType.Workbook);
            WorkbookPart workbookpart = spreadsheetDocument.AddWorkbookPart();
            workbookpart.Workbook = new Workbook();
            MergeCells mergeCells = new MergeCells();
            // Add a WorksheetPart to the WorkbookPart.
            WorksheetPart worksheetPart = workbookpart.AddNewPart<WorksheetPart>();
            worksheetPart.Worksheet = new Worksheet(new SheetData());

            // Add Sheets to the Workbook.
            Sheets sheets = spreadsheetDocument.WorkbookPart.Workbook.AppendChild<Sheets>(new Sheets());

            // Append a new worksheet and associate it with the workbook.
            Sheet sheet = new Sheet() { Id = spreadsheetDocument.WorkbookPart.GetIdOfPart(worksheetPart), SheetId = 1, Name = vm.ListView.ViewTitle };
            sheets.Append(sheet);

            // Get the sheetData cell table.
            SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
            var stylesPart = AppUtils.GetWorkbookStylesPart(spreadsheetDocument);



            Columns lstColumns = new Columns();
            UInt32Value colCount = 1;
            var rowCount = 1;


            foreach (var col in exportableCols)
            {
                lstColumns.Append(new Column() { Min = colCount, Max = colCount, Width = col.ExcelColumnWidth, CustomWidth = true });
                colCount++;
            }
            worksheetPart.Worksheet.InsertAt(lstColumns, 0);
            Row row = new Row();
            //create a cell in C1 (the upper left most cell of the merged cells)
            Cell dataCell = ConstructCell(vm.ListView.ViewTitle, CellValues.String);
            dataCell.StyleIndex = 1;
            row.AppendChild(dataCell);
            sheetData.AppendChild(row);
            mergeCells.Append(new MergeCell() { Reference = new StringValue($"A{rowCount}:{GetCellReference(columnCount - 1)}{rowCount}") });
            if (!string.IsNullOrEmpty(displayCriteria))
            {
                rowCount++;
                row = new Row();
                dataCell = ConstructCell(displayCriteria, CellValues.String);
                dataCell.StyleIndex = 2;
                row.AppendChild(dataCell);
                sheetData.AppendChild(row);
                mergeCells.Append(new MergeCell() { Reference = new StringValue($"A{rowCount}:{GetCellReference(columnCount - 1)}{rowCount}") });
            }

            worksheetPart.Worksheet.InsertAfter(mergeCells, worksheetPart.Worksheet.Elements<SheetData>().First());
            rowCount++;
            row = new Row();
            foreach (var col in exportableCols)
            {
                dataCell = ConstructCell(col.Title, CellValues.String);
                dataCell.StyleIndex = 3;
                row.AppendChild(dataCell);
            }
            sheetData.AppendChild(row);

            var currentCategory = CurrentCategory;
            var categoryChanged = false;
            var showCategoryTotal = false;
            var categoryCount = 0;
            var recordCount = 0;



            foreach (var c in vm.PagedList.Items)
            {
                if (AllowCategorize)
                {
                    var newCategory = GetCategoryValue(c as PropertyAccessor);
                    if (newCategory != currentCategory)
                    {
                        categoryChanged = true;
                        categoryChanged = true;
                        currentCategory = newCategory;
                        showCategoryTotal = true;
                        categoryCount = 0;
                    }
                    else
                    {
                        categoryChanged = false;
                        categoryCount = categoryCount + 1;
                        showCategoryTotal = false;
                    }
                    if (recordCount == 0)
                        showCategoryTotal = false;

                    if (showCategoryTotal)
                    {
                        rowCount++;
                        row = new Row();
                        foreach (var col in exportableCols)
                        {
                            if (col.ComputeTotal)
                            {
                                dataCell = ConstructCell(col.CategoryTotal, CellValues.Number);
                                col.CategoryTotal = 0;
                            }
                            else
                            {
                                dataCell = ConstructCell("", CellValues.String);
                            }
                            dataCell.StyleIndex = 4;
                            row.AppendChild(dataCell);
                        }
                        sheetData.AppendChild(row);
                    }

                    if (categoryChanged)
                    {
                        rowCount++;
                        row = new Row();
                        var colVal = newCategory;
                        dataCell = ConstructCell(colVal.ToString(), CellValues.String);
                        dataCell.StyleIndex = 2;
                        row.AppendChild(dataCell);
                        sheetData.AppendChild(row);
                        mergeCells.Append(new MergeCell() { Reference = new StringValue($"A{rowCount}:{GetCellReference(columnCount - 1)}{rowCount}") });
                    }
                }
                recordCount++;
                rowCount++;

                row = new Row();
                foreach (var col in exportableCols)
                {
                    var colVal = col.GetRawValue(c);
                    if (col.IsNumericColumn())
                    {
                        dataCell = ConstructCell((decimal)colVal, CellValues.Number);
                    }
                    else if (col.IsDateColumn())
                    {
                        if (colVal == null)
                        {
                            dataCell = ConstructCell("", CellValues.String);
                        }
                        else
                        {
                            dataCell = ConstructCell(((DateTime)colVal).ToString("MM/dd/yyyy"), CellValues.String);
                        }
                    }
                    else
                    {
                        dataCell = ConstructCell(colVal.ToString(), CellValues.String);
                    }

                    row.AppendChild(dataCell);
                }
                sheetData.AppendChild(row);
            }
            if (IsCategorized && ShowCategoryTotals)
            {
                row = new Row();
                foreach (var col in exportableCols)
                {
                    if (col.ComputeTotal)
                    {
                        dataCell = ConstructCell(col.CategoryTotal, CellValues.Number);
                        col.CategoryTotal = 0;
                    }
                    else
                    {
                        dataCell = ConstructCell("", CellValues.String);
                    }
                    dataCell.StyleIndex = 4;
                    row.AppendChild(dataCell);
                }
                sheetData.AppendChild(row);
            }
            if (ShowGrandTotalInExport)
            {
                row = new Row();
                foreach (var col in exportableCols)
                {
                    if (col.ComputeTotal)
                    {
                        dataCell = ConstructCell(col.Total, CellValues.Number);
                    }
                    else
                    {
                        dataCell = ConstructCell("", CellValues.String);
                    }
                    dataCell.StyleIndex = 4;
                    row.AppendChild(dataCell);
                }
                sheetData.AppendChild(row);
            }
            spreadsheetDocument.Close();
            memoryStream.Seek(0, SeekOrigin.Begin);
            var fileName = vm.ListView.ViewTitle;
            fileName = fileName.Replace(" ", "_");
            fileName = fileName.Replace(">", "_");
            fileName = fileName.Replace("-", "");
            return new FileStreamResult(memoryStream, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") { FileDownloadName = fileName + ".xlsx" };
        }

        private string GetCellReference(int index)
        {
            if (index < 26)
            {
                return charList[index].ToString();
            }
            return charList[index / 26 - 1].ToString() + charList[index % 26].ToString();
        }
        private Cell ConstructCell(string value, CellValues dataType)
        {
            return new Cell()
            {
                CellValue = new CellValue(value),
                DataType = new EnumValue<CellValues>(dataType)
            };
        }
        private Cell ConstructCell(decimal value, CellValues dataType)
        {
            return new Cell()
            {
                CellValue = new CellValue(value),
                DataType = new EnumValue<CellValues>(dataType)
            };
        }




    }
}
using DocumentFormat.OpenXml.Drawing.Charts;
using JOIN_Data.ListViews;
using JOIN_Data.Models.CoreModels;
using JOIN_Data.Models.LogModels;
using JOIN_Data.Models.ViewModels;
using JOIN_Data.Persistence;
using JOIN_Data.Services.Interfaces;
using JOIN_Data.Utils;
using System.Collections.Generic;

namespace CommonUtil.ListViews
{
    public class ListViewFactory : IListViewFactory
    {
        public Dictionary<string, IListView> ListViews;

        public ListViewFactory()
        {
            ListViews = new Dictionary<string, IListView>();
            initViews();
        }
        public ListView<TViewModel, TRepositoryModel> GetListView<TViewModel, TRepositoryModel>(string key)
        {
            return ListViews[key] as ListView<TViewModel, TRepositoryModel>;
        }
        public IListView GetListView(string key)
        {
            return ListViews[key];
        }

        private void initViews()
        {

            ListView<ApplicationViewMode, ApplicationViewMode> appView = addListView<ApplicationViewMode, ApplicationViewMode>(AppManagementNavConstants.Applications);
            setAppViewProperties(appView);
            //fieldOfficePropertyRecoveriesViewProperties();

            //********************************************
            ListView<Presentation, Presentation> presentationView = addListView<Presentation, Presentation>("Presentations");
            ViewColumn<Presentation, Presentation> presentationCol = presentationView.AddViewColumn("Title", 50);
            presentationCol.LinkColumn = true;
            presentationView.OpenRecordInPreview = false;
            presentationCol = presentationView.AddViewColumn("DateCreated", 10);
            presentationCol.ColumnType = ViewColumnType.Date;

            presentationView.ViewTitle = "Presentations";
            presentationView.KeyColumn = "Key";
            //********************************************
            ListView<UserListViewModel, UserListViewModel> usersView = addListView<UserListViewModel, UserListViewModel>("Users");
            ViewColumn<UserListViewModel, UserListViewModel> userCol = usersView.AddViewColumn("FullName", 15);
            userCol.LinkColumn = true;
            usersView.OpenRecordInPreview = false;
            userCol = usersView.AddViewColumn("Rank", 10);
            userCol = usersView.AddViewColumn("LastLogin", 10);
            userCol.ColumnType = ViewColumnType.Date;
            userCol = usersView.AddViewColumn("DutyTitle", 20);
            userCol.AllowFilter = true;
            userCol = usersView.AddViewColumn("ProfileActive", 20, false);
            userCol.AllowExtSearch = false;
            userCol = usersView.AddViewColumn("MembershipActive", 20, false);
            userCol.AllowExtSearch = false;
            usersView.AllowActiveFilter = true;
            usersView.ShowTitleAsPageTitle = true;
            usersView.IsUsersView = true;
            usersView.AllowChangeDisplay = true;
            usersView.IsCustomizable = true;
            usersView.ViewTitle = "Users";
            usersView.KeyColumn = "JAGCProfileUUID";
            //********************************************
            ListView<KeyValueLookup, KeyValueLookup> keyValueView = addListView<KeyValueLookup, KeyValueLookup>("KeyValues");
            ViewColumn<KeyValueLookup, KeyValueLookup> keyCol = keyValueView.AddViewColumn("DisplayValue", 50);
            keyCol.LinkColumn = true;
            keyCol = keyValueView.AddViewColumn("Code", 20);
            keyCol.AllowSearch = false;
            keyCol = keyValueView.AddDisplayOnlyColumn("SortOrder", 20);
            keyCol.ColumnType = ViewColumnType.Number;
            keyCol = keyValueView.AddDisplayOnlyColumn("ActiveIcon", 10);
            keyCol.FieldExpression = k => k.Active;
            keyCol.SortFieldName = "Active";
            keyValueView.ShowTitleAsPageTitle = true;
            keyValueView.SetAdminViewProps("Keywords", "New Keyword");
            //********************************************

            ListView<ErrorLog, ErrorLog> errorView = addListView<ErrorLog, ErrorLog>("ErrorLogs");
            ViewColumn<ErrorLog, ErrorLog> errorCol = errorView.AddViewColumn("ErrorMessage", 50);
            errorCol = errorView.AddViewColumn("LogDate", 10);
            errorCol.ColumnType = ViewColumnType.Date;
            errorView.ViewTitle = "Error Logs";
            errorView.AllowExtSearch = false;
            //errorView.AllowCreate = true;

            //********************************************

        }

        private ListView<TViewModel, TRepositoryModel> addListView<TViewModel, TRepositoryModel>(string key)
        {
            ListView<TViewModel, TRepositoryModel> listView = new ListView<TViewModel, TRepositoryModel>(key);
            ListViews.Add(key, listView);
            return listView;
        }


        private void setAppViewProperties(ListView<ApplicationViewMode, ApplicationViewMode> appView)
        {
            //ListView<MedClaimViewModel, MedClaimViewModel> medClaimView = addListView<MedClaimViewModel, MedClaimViewModel>("MedClaims");

            ViewColumn<ApplicationViewMode, ApplicationViewMode> appCol = appView.AddViewColumn("AppName", 10);
            ColumnGroup colGroup = appView.AddColumnGroup(0, "Basic Details");
            appCol.LinkColumn = true;           
            appCol.RequiredColumn = true;
            appCol.ColumnGroup = colGroup;
            appCol = appView.AddViewColumn("CreatedBy", 10);
            appCol.ColumnGroup = colGroup;
            appCol.AllowFilter = true;
            appCol = appView.AddViewColumn("LastUpdatedBy", 10);
            appCol.ColumnGroup = colGroup;
            appCol.AllowFilter = true;
            appCol = appView.AddViewColumn("ApplicantCount", 10);
            appCol.ColumnGroup = colGroup;
            appCol.AllowFilter = true;

            //appCol = appView.AddDisplayOnlyColumn("IPDisplayName", 12);
            //appCol.RepositoryFieldName = "IPFullName";
            //appCol.SortFieldName = "IPFullName";
            //appCol.ColumnGroup = colGroup;

            //appCol = appView.AddExportOnlyColumn("IPFullName");
            //appCol.ColumnGroup = colGroup;
            //appCol = appView.AddViewColumn("Rank", 10, false);
            //appCol.AllowFilter = true;
            //appCol.AllowExtSearch = false;
            //appCol.ColumnGroup = colGroup;

            colGroup = appView.AddColumnGroup(3, "Dates");
            appCol = appView.AddViewColumn("CreatedDate", 8);
            appCol.ColumnType = ViewColumnType.Date;
            appCol.ColumnGroup = colGroup;
            appCol = appView.AddViewColumn("LastUpdatedDate", 8, false);
            appCol.ColumnType = ViewColumnType.Date;
            appCol.ColumnGroup = colGroup;

            colGroup = appView.AddColumnGroup(2, "Status");
            appCol = appView.AddViewColumn("Status", 10, false);
            appCol.AllowFilter = true;
            appCol.ColumnGroup = colGroup;



            //appView.AllowCategorize = false;
            //appView.AddCategoryOption("IncidentDescription", "By Incident Description");
            //appView.AddCategoryOption("LastUpdatedBy", "Modified Date");
            //appView.ShowCategoryTotals = true;

            //appView.ShowGrandTotalInExport = true;

            appView.NewButtonFunc = "loadPartial('/admin/Create', {},'recordListContainer')";
            appView.ShowTitleAsPageTitle = true;            
            appView.AllowCreate = true;
            appView.OpenRecordInPreview = true;
            appView.ShowSearchCriteria = true;
            appView.AllowChangeDisplay = true;
            appView.IsCustomizable = true;
            appView.ViewTitle = AppManagementNavConstants.Applications;
            appView.KeyColumn = "AppId";
        }


        //private void fieldOfficePropertyRecoveriesViewProperties()
        //{
        //    var reportClaimView = addListView<ReportTypeViewModel, ReportTypeViewModel>(LeftNavConstants.FieldOfficePropertyRecoveries);
        //    ViewColumn<ReportTypeViewModel, ReportTypeViewModel> reportClaimCol = reportClaimView.AddViewColumn("ClaimId", 6);
        //    //reportClaimCol.ShowTitle = false;
        //    //reportClaimCol = reportClaimView.AddViewColumn("ClaimId", 6);

        //    reportClaimCol.AllowSort = false;
        //    reportClaimCol = reportClaimView.AddViewColumn("OfficeName", 7);
        //    reportClaimCol.AllowSort = false;
        //    reportClaimCol = reportClaimView.AddViewColumn("NumberAsserted", 8);
        //    reportClaimCol.ColumnType = ViewColumnType.Number;
        //    reportClaimCol.ComputeTotal = true;
        //    reportClaimCol.AllowSort = false;
        //    reportClaimCol = reportClaimView.AddViewColumn("AmountAsserted", 7);
        //    reportClaimCol.ComputeTotal = true;
        //    reportClaimCol.ColumnType = ViewColumnType.Currency;
        //    reportClaimCol.AllowSort = false;

        //    reportClaimCol = reportClaimView.AddViewColumn("Opened_Date", 7);
        //    reportClaimCol.ColumnType = ViewColumnType.Date;
        //    reportClaimCol.AllowSort = false;
        //    reportClaimCol = reportClaimView.AddViewColumn("ClosedDate", 7);
        //    reportClaimCol.ColumnType = ViewColumnType.Date;
        //    reportClaimCol.AllowSort = false;

        //    reportClaimCol = reportClaimView.AddViewColumn("NumberReceived", 8);
        //    reportClaimCol.ColumnType = ViewColumnType.Number;
        //    reportClaimCol.ComputeTotal = true;
        //    reportClaimCol.AllowSort = false;
        //    reportClaimCol = reportClaimView.AddViewColumn("AmountReceived", 8);
        //    reportClaimCol.ComputeTotal = true;
        //    reportClaimCol.ColumnType = ViewColumnType.Currency;
        //    reportClaimCol.AllowSort = false;
        //    reportClaimCol = reportClaimView.AddViewColumn("RealPropertyDemandAmount", 9);
        //    reportClaimCol.ComputeTotal = true;
        //    reportClaimCol.ColumnType = ViewColumnType.Currency;
        //    reportClaimCol.AllowSort = false;
        //    reportClaimCol = reportClaimView.AddViewColumn("MilitaryEquipmentDemandAmount", 9);
        //    reportClaimCol.ComputeTotal = true;
        //    reportClaimCol.ColumnType = ViewColumnType.Currency;
        //    reportClaimCol.AllowSort = false;
        //    reportClaimCol = reportClaimView.AddViewColumn("NumberRIK", 7);
        //    reportClaimCol.ColumnType = ViewColumnType.Number;
        //    reportClaimCol.ComputeTotal = true;
        //    reportClaimCol.AllowSort = false;
        //    reportClaimCol = reportClaimView.AddViewColumn("AmountRIK", 6);
        //    reportClaimCol.ComputeTotal = true;
        //    reportClaimCol.ColumnType = ViewColumnType.Currency;
        //    reportClaimCol.AllowSort = false;

        //    reportClaimView.ShowTitleAsPageTitle = true;
        //    //reportClaimView.CategorizedColumn = "FiscalYear";
        //    reportClaimView.ShowGrandTotalInExport = true;
        //    reportClaimView.ShowGrandTotalInDisplay = true;
        //    //reportClaimView.ShowCategoryTotals = true;
        //    reportClaimView.AllowSearch = false;
        //    reportClaimView.AllowExport = false;

        //    reportClaimView.ViewTitle = "Field Office Property Recoveries";
        //    reportClaimView.KeyColumn = "Key";
        //}
    }
}
using Microsoft.AspNetCore.Mvc;
using System;

namespace CommonUtil.ListViews
{
    public class ListViewModel<TViewModel, TRepositoryModel>
    {
        public ListView<TViewModel, TRepositoryModel> ListView { get; set; }
        public PagedList<TViewModel> PagedList { get; set; }
        public PagingInfo PagingInfo { get; set; }
        public string ControllerName { get; set; }
        public string ActionName { get; set; }
        public string RecordRoute { get; set; }
        public string PartialURL { get; set; }


        public ListViewModel()
        {
        }
        public ListViewModel(ControllerContext context)
        {
            ControllerName = context.ActionDescriptor.ControllerName;
            ActionName = context.ActionDescriptor.ActionName;
        }

        public string GetDetailsURL(Guid id)
        {
            if (!string.IsNullOrEmpty(RecordRoute))
            {
                return RecordRoute + "/" + id.ToString();
            }
            return ControllerName + "/" + ListView.DetailsActionName + "?" + ListView.RecordIdParam + "=" + id.ToString();
        }
        public string GetDetailsURL(int id)
        {
            if (!string.IsNullOrEmpty(RecordRoute))
            {
                return RecordRoute + "/" + id;
            }
            return ControllerName + "/" + ListView.DetailsActionName + "?" + ListView.RecordIdParam + "=" + id;
        }
        public string GetDetailsURL(string id)
        {
            if (!string.IsNullOrEmpty(RecordRoute))
            {
                return RecordRoute + "/" + id;
            }
            return ControllerName + "/" + ListView.DetailsActionName + "?" + ListView.RecordIdParam + "=" + id;
        }
        public string GetExportUrlPath()
        {
            return GetPartialPath() + "/" + ListView.ExportActionName + "?key=" + ListView.ViewKey;
        }
        public string GetDetailsUrlPath()
        {
            return GetPartialPath() + "/" + ListView.DetailsActionName;
        }
        public string GetNewUrlPath()
        {
            return GetPartialPath() + "/" + ListView.NewActionName;
        }
        public string GetEditUrlPath()
        {
            return GetPartialPath() + "/" + ListView.EditActionName;
        }
        public string GetSaveUrlPath()
        {
            return GetPartialPath() + "/" + ListView.SaveActionName;
        }
        public string GetPartialUrlPath()
        {
            if (string.IsNullOrEmpty(PartialURL))
            {
                return "/" + ControllerName + "/" + ActionName;
            }
            return "/" + PartialURL;
        }
        public string GetPartialPath()
        {
            if (string.IsNullOrEmpty(PartialURL))
            {
                return "/" + ControllerName;
            }
            return "/" + PartialURL;
        }
        public string GetUniqueColumnValuesPath()
        {
            return "/" + ControllerName + "/GetUniqueValues";
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace CommonUtil.ListViews
{
    /// <summary>
    /// Purpose of this class to hold list of item for a page and total count for all records 
    /// </summary>
    /// <typeparam name="T"></typeparam>
    public class PagedList<T>
    {
        public int TotalCount { get; set; }
        public IEnumerable<T> Items { get; set; }


    }
}
using JOIN_Data.Enums;
using JOIN_Data.Utils;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;

namespace CommonUtil.ListViews
{
    /// <summary>
    /// Represents information for a paged data
    /// </summary>
    public class PagingInfo
    {
        private string searchString;
        private string sortOrder;
        public ControllerContext context { get; set; }
        public string ViewKey { get; set; }
        public string CategoryKey { get; set; }
        public int Page { get; set; } = 1;
        public int TotalRecords { get; set; }
        public int PageSize { get; set; } = 25;
        public string SortColumn { get; set; } = "";
        public string CategorizedColumn { get; set; } = "";

        public string DefaultSortColumn { get; set; }
        public bool UpdateBrowserState { get; set; }
        public List<FieldFilter> FieldFilters { get; set; }
        public List<ExtSearchFilter> ExtSearchFilters { get; set; }
        public List<string> SelectedIds { get; set; }
        public string ControllerName { get; set; }
        public string DisplayCriteria { get; set; }
        public bool TogglePreview { get; set; }
        public DisplayMode DisplayType { get; set; }
        public ActiveFilterFlag? ActiveFilterFlag { get; set; }


        public PagingInfo()
        {
            FieldFilters = new List<FieldFilter>();
            ExtSearchFilters = new List<ExtSearchFilter>();
            SelectedIds = new List<string>();
            DisplayType = DisplayMode.Table;
        }

        public string SortOrder
        {
            set
            {
                sortOrder = value;
            }
            get
            {
                return String.IsNullOrEmpty(sortOrder) ? ListViewConstants.SORT_ORDER_ASC : sortOrder;
            }
        }
        public string SearchString
        {
            set
            {
                searchString = value;
            }
            get
            {
                return String.IsNullOrEmpty(searchString) ? "" : searchString;
            }
        }

        public int Totalpages
        {

            get
            {
                if (TotalRecords > 0 && PageSize > 0)
                {

                    return (int)Math.Ceiling((float)TotalRecords / PageSize);
                }
                else
                {
                    return 0;
                }
            }
        }
        public string GetActiveFilterIcon()
        {
            if (ActiveFilterFlag == null || ActiveFilterFlag == ListViews.ActiveFilterFlag.Active)
            {
                return IconConstants.ACTIVE_ICON;
            }
            else if (ActiveFilterFlag == ListViews.ActiveFilterFlag.Inactive)
            {
                return IconConstants.INACTIVE_ICON_DANGER;
            }
            return IconConstants.ACTIVE_ICON + " " + IconConstants.INACTIVE_ICON_DANGER;
        }
        public string GetActiveFilterTooltip()
        {
            if (ActiveFilterFlag == null || ActiveFilterFlag == ListViews.ActiveFilterFlag.Active)
            {
                return "Showing only active records";
            }
            else if (ActiveFilterFlag == ListViews.ActiveFilterFlag.Inactive)
            {
                return "Showing only inactive records";
            }
            return "Showing both active and inactive records";
        }
        public IEnumerable<FieldFilter> GetFilterTags()
        {
            return FieldFilters.Where(f => f.ShowAsTag && f.Values != null && f.Values?.Where(v => !string.IsNullOrEmpty(v)).Count() > 0);
        }
        public string GetCountText()
        {
            if (TotalRecords == 0)
            {
                return "No records found";
            }

            int startCount = (PageSize * (Page - 1) + 1);
            int endCount = startCount + PageSize - 1;
            endCount = (endCount > TotalRecords) ? TotalRecords : endCount;
            return startCount + " - " + endCount + " of " + TotalRecords;
        }

        public string GetCurrentPagingInfoJSON()
        {
            return JsonConvert.SerializeObject(this);
        }

        private string getSearchQueryString()
        {
            if (!String.IsNullOrEmpty(SearchString))
            {
                return "&SearchString=" + SearchString;
            }
            return null;
        }

        public string GetSortOrder(string sortField)
        {
            if (!SortColumn.Equals(sortField))
            {
                return ListViewConstants.SORT_ORDER_ASC;
            }
            if (SortColumn.Equals(sortField) && SortOrder == ListViewConstants.SORT_ORDER_ASC)
            {
                return ListViewConstants.SORT_ORDER_DESC;
            }
            return ListViewConstants.SORT_ORDER_ASC;
        }
        public bool HasNextPage()
        {
            return Page < Totalpages;
        }
        public bool HasPreviousPage()
        {
            return Page > 1;
        }
        public bool ShowNavigation()
        {
            return TotalRecords > PageSize;
        }
        public int NextPageNumber
        {
            get
            {
                if (HasNextPage())
                {
                    return Page + 1;
                }

                return Totalpages;
            }
        }
        public int PreviousPageNumber
        {
            get
            {
                if (HasPreviousPage())
                {
                    return Page - 1;
                }

                return 1;
            }
        }
        public bool HasSearchString()
        {
            return !String.IsNullOrWhiteSpace(SearchString);
        }
        public bool IsFiltered()
        {
            return HasSearchString() || GetFilterTags().Count() > 0 || ExtSearchFilters.Count > 0;
        }
        public string GetColumnTitleClass(string colToCheck)
        {
            return SortColumn.Equals(colToCheck) ? "text-dark" : "text-muted";
        }
        public string GetColumnTitleBorderStyle(string colToCheck)
        {
            return SortColumn.Equals(colToCheck) ? "border-bottom-color:black" : "";
        }
        public string GetColumnSortIcon(string colToCheck)
        {
            if (SortColumn.Equals(colToCheck))
            {
                return SortOrder.Equals(ListViewConstants.SORT_ORDER_ASC) ? "bi bi-chevron-up" : "bi bi-chevron-down";
            }
            return "bi bi-chevron-expand";
        }

    }
}
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text;

namespace CommonUtil.ListViews
{
    public class UserExportColumn
    {
        public int Id { get; set; }
        public int UserListViewId { get; set; }
        [Required]
        [MaxLength(100)]
        public string ColumnName { get; set; }
        public int SortOrder { get; set; }
        public int Width { get; set; }

        public UserListView UserListView { get; set; }

    }
}
using CommonUtil.ListViews;
using JOIN_Data.Models.UtilityModels;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Text;

namespace CommonUtil.ListViews
{
    public class UserListView : CommonModelProperties
    {
        [Required]
        [MaxLength(100)]
        public string ViewKey { get; set; }

        [MaxLength(100)]
        public string CategorizedColumn { get; set; }

        public List<UserDisplayColumn> DisplayColumns { get; set; }
        public List<UserExportColumn> ExportColumns { get; set; }
        [NotMapped]
        public IListView ListView { get; set; }

        public UserListView()
        {
            DisplayColumns = new List<UserDisplayColumn>();
            ExportColumns = new List<UserExportColumn>();
        }

        public List<UserViewColumn> GetDisplayColumns()
        {
            var displayColumns = ListView.GetDisplayableColumns();
            if (DisplayColumns.Count == 0)
                return displayColumns;
            List<UserViewColumn> columns = new();
            foreach (var column in DisplayColumns.OrderBy(c => c.SortOrder))
            {

                var col = displayColumns.FirstOrDefault(c => c.FieldName == column.ColumnName);
                if (col != null)
                {
                    col.Width = column.Width;
                    columns.Add(col);
                }
            }
            return columns;
        }
        public List<UserViewColumn> GetExportColumns()
        {
            var exportColumns = ListView.GetExportColumns();
            if (ExportColumns.Count == 0)
                return exportColumns;
            List<UserViewColumn> columns = new();
            foreach (var column in ExportColumns.OrderBy(c => c.SortOrder))
            {
                var col = exportColumns.FirstOrDefault(c => c.FieldName == column.ColumnName);
                if (col != null)
                {
                    //col.Width = column.Width;
                    columns.Add(col);
                }
            }
            return columns;
        }
        public List<UserViewColumn> GetSelectedExportColumns()
        {
            var exportColumns = ListView.GetExportColumns();
            List<UserViewColumn> columns = new();
            foreach (var column in ExportColumns.OrderBy(c => c.SortOrder))
            {
                var col = exportColumns.FirstOrDefault(c => c.FieldName == column.ColumnName);
                if (col != null)
                {
                    columns.Add(col);
                }
            }
            return columns;
        }
    }
}
using System;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Linq.Dynamic.Core;
using System.Linq.Expressions;
using System.Reflection;
using System.Text.RegularExpressions;

namespace CommonUtil.ListViews
{
    public class UserViewColumn
    {
        public string Title { get; set; }
        public bool LinkColumn { get; set; }
        public string FieldName { get; set; }

        public int Width { get; set; }
        public int ExcelColumnWidth { get; set; } = 25;
        public bool AllowFilter { get; set; }
        public bool ShowInView { get; set; }
        public bool AllowExport { get; set; }
        public bool ShowTitle { get; set; }
        public ViewColumnType ColumnType { get; set; }


    }
}
using DocumentFormat.OpenXml.Vml;
using JOIN_Data.ListViews;
using System;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Linq.Dynamic.Core;
using System.Linq.Expressions;
using System.Reflection;
using System.Text.RegularExpressions;

namespace CommonUtil.ListViews
{
    public class ViewColumn<TViewModel, TRepositoryModel>
    {
        public string Title { get; set; }
        public bool LinkColumn { get; set; }
        public string FieldName { get; set; }
        //Name of the field in the repository eg:Office.Name if the field is from a child table
        public string RepositoryFieldName { get; set; }
        //Set this field if you want to sort using a different field than the the display field
        //Eg: Rank should be sorted by a rank sort order - not Ranks alphabetically
        public string SortFieldName { get; set; }

        public Expression<Func<TViewModel, Object>> FieldValue { get; set; }
        public Expression<Func<TRepositoryModel, object>> FieldExpression { get; set; }
        public int Width { get; set; }
        public string StyleClass { get; set; }
        public int ExcelColumnWidth { get; set; } = 25;
        public bool AllowFilter { get; set; }
        public bool ShowInView { get; set; }
        public bool ShowByDefault { get; set; }
        public bool RequiredColumn { get; set; }
        public bool AllowExport { get; set; }
        public bool AllowExtSearch { get; set; }
        public bool AllowSearch { get; set; }
        public bool ShowTitle { get; set; }
        public bool AllowSort { get; set; }
        public bool ComputeTotal { get; set; }
        public decimal Total { get; set; }
        public decimal CategoryTotal { get; set; }
        public ColumnGroup ColumnGroup { get; set; }
        public ViewColumnType ColumnType { get; set; }

        public ViewColumn()
        {
            init();
        }
        public ViewColumn(string fieldName, int width)
        {
            this.FieldName = fieldName;
            this.Width = width;
            this.FieldValue = GetFieldValueExpression();
            this.Title = GetPropertyLabel();
            init();
        }
        public ViewColumn(string title, string fieldName, int width)
        {
            this.Title = title;
            this.FieldName = fieldName;
            this.Width = width;
            this.FieldValue = GetFieldValueExpression();
            init();
        }
        private void init()
        {
            AllowFilter = false;
            ShowInView = true;
            ShowByDefault = true;
            AllowExport = true;
            AllowExtSearch = true;
            AllowSearch = true;
            ShowTitle = true;
            AllowSort = true;
            StyleClass = "";
            ColumnType = ViewColumnType.Text;
            SortFieldName = FieldName;
        }
        public Func<TViewModel, Object> GetFieldValueCompiled()
        {
            return FieldValue.Compile();
        }

        public bool IsTextColumn()
        {
            return ColumnType == ViewColumnType.Text;
        }
        public bool IsNumberColumn()
        {
            return ColumnType == ViewColumnType.Number;
        }
        public bool IsDateColumn()
        {
            return ColumnType == ViewColumnType.Date;
        }
        public bool IsCurrencyColumn()
        {
            return ColumnType == ViewColumnType.Currency;
        }
        public bool IsNumericColumn()
        {
            return IsNumberColumn() || IsCurrencyColumn();
        }
        public bool IsBooleanColumn()
        {
            return ColumnType == ViewColumnType.Boolean;
        }
        public string GetRepositoryFieldName()
        {
            if (String.IsNullOrEmpty(RepositoryFieldName))
            {
                return FieldName;
            }
            return RepositoryFieldName;
        }

        public Expression<Func<TRepositoryModel, bool>> GetTextSearchExpression(string filter)
        {
            bool isNumeric = Regex.IsMatch(filter, @"^\d+$");
            Expression<Func<TRepositoryModel, bool>> e = null;
            if (IsTextColumn())
            {
                e = (Expression<Func<TRepositoryModel, bool>>)DynamicExpressionParser
                .ParseLambda(
                          typeof(TRepositoryModel), typeof(bool),
                          GetRepositoryFieldName() + ".ToLower().Contains(@0)", filter.Trim().ToLower()
                );
                return e;
            }
            else if (IsNumericColumn() && isNumeric)
            {
                e = (Expression<Func<TRepositoryModel, bool>>)DynamicExpressionParser
                .ParseLambda(
                    typeof(TRepositoryModel), typeof(bool),
                    GetRepositoryFieldName() + " == @0", filter.Trim()
                );
                return e;
            }
            return e;
        }

        public (string displayCriteria, Expression<Func<TRepositoryModel, bool>> searchExpression) GetExtendedSearchExpression(ExtSearchFilter filter)
        {
            string criteria = "";
            Expression<Func<TRepositoryModel, bool>> e = null;
            if (IsTextColumn())
            {
                e = (Expression<Func<TRepositoryModel, bool>>)DynamicExpressionParser
                .ParseLambda(
                          typeof(TRepositoryModel), typeof(bool),
                          GetRepositoryFieldName() + ".Contains(@0)", filter.Value1.Trim()
                );
                criteria = this.Title + " containing " + filter.Value1.Trim();
                return (criteria, e);
            }
            else if (IsNumericColumn())
            {
                if (filter.Operator == ">" && !String.IsNullOrEmpty(filter.Value1) && !String.IsNullOrEmpty(filter.Value2))
                {
                    criteria = "(" + Title + " >" + filter.Value1.Trim() + " and < " + filter.Value2 + ")";
                    e = (Expression<Func<TRepositoryModel, bool>>)DynamicExpressionParser.ParseLambda(
                    typeof(TRepositoryModel), typeof(bool),
                    GetRepositoryFieldName() + " > @0 and  " + GetRepositoryFieldName() + " < @1",
                    Convert.ToInt64(filter.Value1), Convert.ToInt64(filter.Value2));
                }
                else if (filter.IsValidOperator() && !String.IsNullOrEmpty(filter.Value1))
                {
                    criteria = Title + " " + filter.Operator + " " + filter.Value1.Trim();
                    e = (Expression<Func<TRepositoryModel, bool>>)DynamicExpressionParser.ParseLambda(
                    typeof(TRepositoryModel), typeof(bool),
                    GetRepositoryFieldName() + " " + filter.Operator + " @0",
                    Convert.ToInt64(filter.Value1));
                }
            }
            else if (IsDateColumn())
            {
                if (filter.Operator == ">=" && !String.IsNullOrEmpty(filter.Value1) && !String.IsNullOrEmpty(filter.Value2))
                {

                    var stringExp = $"{GetRepositoryFieldName()} >= Convert.ToDateTime(\"{filter.Value1.Trim()}\") and {GetRepositoryFieldName()} <= Convert.ToDateTime(\"{filter.Value2.Trim()}\")";
                    criteria = "(" + Title + " >=" + filter.Value1.Trim() + " and <= " + filter.Value2 + ")";
                    e = (Expression<Func<TRepositoryModel, bool>>)DynamicExpressionParser.ParseLambda(
                    typeof(TRepositoryModel), typeof(bool),
                    stringExp);
                }
                else if (filter.IsValidOperator() && !String.IsNullOrEmpty(filter.Value1))
                {
                    criteria = Title + " " + filter.Operator + " " + filter.Value1.Trim();
                    e = (Expression<Func<TRepositoryModel, bool>>)DynamicExpressionParser.ParseLambda(
                    typeof(TRepositoryModel), typeof(bool),
                    GetRepositoryFieldName() + " " + filter.Operator + string.Format(" Convert.ToDateTime(\"{0}\")", filter.Value1.Trim())
                    );
                }
            }
            return (criteria, e);
        }

        public (string displayCriteria, Expression<Func<TRepositoryModel, bool>> searchExpression) GetFieldFilterExpression(FieldFilter filter)
        {
            string dispCriteria = "";
            Expression<Func<TRepositoryModel, bool>> e = null;
            string criteria = "";
            string[] parameters = new string[filter.Values.Count()];
            if (filter.Values.Count() > 0)
            {
                int loopCount = 0;
                foreach (string v in filter.Values)
                {
                    criteria += !String.IsNullOrEmpty(criteria) ? " OR " : "";
                    criteria += GetRepositoryFieldName() + " = @" + loopCount;
                    dispCriteria += !String.IsNullOrEmpty(dispCriteria) ? ", " : "";
                    dispCriteria += v.Trim();
                    parameters[loopCount] = v.Trim();
                    loopCount++;
                }

                e = (Expression<Func<TRepositoryModel, bool>>)DynamicExpressionParser
                .ParseLambda(
                          typeof(TRepositoryModel), typeof(bool),
                          criteria, parameters
                );
                if (!String.IsNullOrEmpty(dispCriteria))
                {
                    dispCriteria = "(" + Title + " containing " + dispCriteria + ")";
                }

            }
            return (dispCriteria, e);

        }

        public Expression<Func<TRepositoryModel, Object>> GetFieldExpression()
        {
            if (FieldExpression != null)
            {
                return FieldExpression;
            }
            string fldName = GetRepositoryFieldName();
            ParameterExpression parameterExpression = Expression.Parameter(typeof(TRepositoryModel), "x");
            Expression expression = parameterExpression;
            Expression property = Expression.Property(parameterExpression, fldName);
            Expression conversion = Expression.Convert(property, typeof(object));
            var lambda = Expression.Lambda<Func<TRepositoryModel, Object>>(conversion, parameterExpression);
            return lambda;
        }

        public Expression<Func<TViewModel, Object>> GetFieldValueExpression()
        {
            string fldName = GetRepositoryFieldName();
            ParameterExpression parameterExpression = Expression.Parameter(typeof(TViewModel), "x");
            Expression expression = parameterExpression;
            Expression property = Expression.Property(parameterExpression, fldName);
            Expression conversion = Expression.Convert(property, typeof(object));
            var lambda = Expression.Lambda<Func<TViewModel, Object>>(conversion, parameterExpression);
            return lambda;
        }
        public Expression<Func<TRepositoryModel, Object>> GetSortFieldExpression()
        {
            ParameterExpression parameterExpression = Expression.Parameter(typeof(TRepositoryModel), "x");
            Expression expression = parameterExpression;
            Expression property = Expression.Property(parameterExpression, SortFieldName);
            Expression conversion = Expression.Convert(property, typeof(object));
            var lambda = Expression.Lambda<Func<TRepositoryModel, Object>>(conversion, parameterExpression);
            return lambda;
        }
        public string GetExtSearchDisplayCriteria(ExtSearchFilter filter)
        {
            string criteria = "";
            if (IsTextColumn())
            {
                criteria = "containing " + filter.Value1.Trim();
                return criteria;
            }
            else if (IsNumericColumn())
            {
                if (filter.Operator == ">" && !String.IsNullOrEmpty(filter.Value1) && !String.IsNullOrEmpty(filter.Value2))
                {
                    criteria = ">" + filter.Value1.Trim() + " and < " + filter.Value2;
                }
                else if (filter.IsValidOperator() && !String.IsNullOrEmpty(filter.Value1))
                {
                    criteria = filter.Operator + " " + filter.Value1.Trim();
                }
            }
            else if (IsDateColumn())
            {
                if (filter.Operator == ">=" && !String.IsNullOrEmpty(filter.Value1) && !String.IsNullOrEmpty(filter.Value2))
                {

                    criteria = ">=" + filter.Value1.Trim() + " and <= " + filter.Value2;
                }
                else if (filter.IsValidOperator() && !String.IsNullOrEmpty(filter.Value1))
                {
                    criteria = filter.Operator + " " + filter.Value1.Trim();
                }
            }
            return criteria;
        }
        private string GetPropertyLabel()
        {
            PropertyInfo property = typeof(TViewModel).GetProperty(FieldName);
            string label = property.Name;
            if (Attribute.IsDefined(property, typeof(DisplayAttribute)))
            {
                DisplayAttribute dispAtt = (DisplayAttribute)Attribute.GetCustomAttribute(
                  property, typeof(DisplayAttribute));
                label = dispAtt.Name;

            }
            return label;
        }

        public Object GetColumnValue(TViewModel item)
        {
            var val = GetFieldValueCompiled().Invoke(item);
            if (ComputeTotal && IsNumericColumn())
            {
                Total = Total + (decimal)val;
                CategoryTotal = CategoryTotal + (decimal)val;
            }
            if (IsDateColumn() && val != null && val is DateTime)
            {
                return ((DateTime)val).ToString("MM/dd/yyyy");
            }
            if (IsCurrencyColumn() && val != null)
            {
                return ((decimal)val).ToString("C", CultureInfo.CurrentCulture);
            }
            return val;
        }

        public Object GetRawValue(TViewModel item)
        {
            var val = GetFieldValueCompiled().Invoke(item);
            if (ComputeTotal && IsNumericColumn())
            {
                Total = Total + (decimal)val;
                CategoryTotal = CategoryTotal + (decimal)val;
            }
            if (IsDateColumn())
            {
                return val != null && val is DateTime ? (DateTime)val : null;
            }
            if (IsNumericColumn())
            {
                return val != null ? (decimal)val : 0;
            }
            return val == null ? "" : val.ToString();
        }

        public string GetTotalValue()
        {
            if (!ComputeTotal)
                return "";
            if (IsCurrencyColumn())
                return Total.ToString("C", CultureInfo.CurrentCulture);
            return Total.ToString("0.00");
        }
        public string GetCategoryTotal()
        {
            if (!ComputeTotal)
                return "";
            var val = "";
            if (IsCurrencyColumn())
            {
                val = CategoryTotal.ToString("C", CultureInfo.CurrentCulture);
            }
            else
            {
                val = CategoryTotal.ToString("0.00");
            }
            CategoryTotal = 0;
            return val;
        }
        public string GetCellStyle()
        {
            string style = $"width:{Width}%";
            if (IsNumericColumn())
            {
                style += ";text-align:right";
            }
            return style;
        }
        public string CellStyleClass { get => IsNumericColumn() ? StyleClass + " text-end" : StyleClass; }


        public UserViewColumn GetUserViewColumn()
        {
            UserViewColumn vc = new UserViewColumn();
            vc.Title = Title;
            vc.LinkColumn = LinkColumn;
            vc.FieldName = FieldName;

            vc.Width = Width;
            vc.ExcelColumnWidth = ExcelColumnWidth;
            vc.AllowFilter = AllowFilter;
            vc.ShowInView = ShowInView;
            vc.AllowExport = AllowExport;
            vc.ShowTitle = ShowTitle;
            vc.ColumnType = ColumnType;
            return vc;
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace CommonUtil.ListViews
{
    public enum ViewColumnType
    {
        Text = 1,
        Number = 2,
        Date = 3,
        Currency = 4,
        Boolean = 5
    }
}
using JOIN_Data.Extensions;
using JOIN_Data.Models.LogModels;
using JOIN_Data.Services.Interfaces;
using Microsoft.AspNetCore.Http;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;

namespace JOIN_Data.Middleware
{
    public class ErrorHandlingMiddleware
    {
        private readonly RequestDelegate next;
        private IErrorLogService errorLogService;

        public ErrorHandlingMiddleware(RequestDelegate next)
        {
            this.next = next;
        }

        public async Task Invoke(HttpContext context, IErrorLogService errorLogService)
        {
            this.errorLogService = errorLogService;
            try
            {
                await next(context);
            }
            catch (Exception ex)
            {
                await HandleExceptionAsync(context, ex);
            }
        }

        private async Task HandleExceptionAsync(HttpContext context, Exception exception)
        {
            var code = HttpStatusCode.InternalServerError; // 500 if unexpected
            var ipAddress = context.Request.HttpContext.Connection.RemoteIpAddress.ToString();
            var userId = context.User.GetJAGCProfileUUID();
            if (exception is FileNotFoundException)
            {
                code = HttpStatusCode.NotFound;
            }

            ErrorLog model = new ErrorLog
            {
                LogDate = DateTime.UtcNow,
                IPAddress = ipAddress,
                JAGCProfileUUID = userId,
                ErrorMessage = exception.Message,
                ErrorDiscription = exception.StackTrace.ToString()
            };
            await errorLogService.AddAsync(model);
            context.Response.Clear();
            context.Response.StatusCode = (int)code;
        }
    }
}
using JOIN_Data.Enums;
using JOIN_Data.Models.UtilityModels;
using System;
using System.ComponentModel.DataAnnotations;


namespace JOIN_Data.Models.CoreModels
{
    public class KeyValueLookup : CommonAdminModelProperties, ICommonModelFields
    {
        public int KeyValueTypeId { get; set; }

        [Display(Name = "Keyword Value")]
        [Required]
        [MaxLength(500)]
        public String DisplayValue { get; set; }
        [MaxLength(100)]
        [Display(Name = "Keyword Code")]
        public String Code { get; set; }
        [Display(Name = "Sort Order")]
        public int SortOrder { get; set; }




        public KeyValueLookup()
        {
            KeyValueTypeId = 1;
            Active = true;
        }
        public KeyValueLookup(int typeId)
        {
            KeyValueTypeId = typeId;
            Active = true;
        }

        public KeyValueType KeyValueType { get; set; }


    }
}
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text;

namespace JOIN_Data.Models.CoreModels
{
    public class KeyValueType
    {
        public int Id { get; set; }
        [MaxLength(100)]
        public string Name { get; set; }
        public bool HasCode { get; set; }
    }
}
using JOIN_Data.Enums;
using JOIN_Data.Models.UtilityModels;
using JOIN_Data.Utils;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Linq.Expressions;
using System.Text;

namespace JOIN_Data.Models.CoreModels
{
    public class Presentation : CommonModelProperties
    {
        [Required]
        [MaxLength(500)]
        [Display(Name = "Program Title")]
        public string Title { get; set; }
        public Guid Key { get; set; }
        [MaxLength(100)]
        [Display(Name = "Short Reference")]
        //[Required]
        public string ShortReference { get; set; }
        [MaxLength(100)]
        [Display(Name = "Version")]
        [Required]
        public string Version { get; set; }
        [MaxLength(500)]
        public string ThemeClass { get; set; }
        [DataType(DataType.Date)]
        [DisplayFormat(ApplyFormatInEditMode = true, DataFormatString = "{0:MM/dd/yyyy}")]
        public DateTime? DatePublished { get; set; }
        [DataType(DataType.Date)]
        [DisplayFormat(ApplyFormatInEditMode = true, DataFormatString = "{0:MM/dd/yyyy}")]
        public DateTime? DateClosed { get; set; }
        [Display(Name = "Training Available Starting")]
        [DataType(DataType.Date)]
        [DisplayFormat(ApplyFormatInEditMode = true, DataFormatString = "{0:MM/dd/yyyy}")]
        public DateTime? PresentationStartDate { get; set; }
        [DataType(DataType.Date)]
        [DisplayFormat(ApplyFormatInEditMode = true, DataFormatString = "{0:MM/dd/yyyy}")]
        [Display(Name = "No Longer Available After")]
        public DateTime? PresentationEndDate { get; set; }

        [MaxLength(4000)]
        public string EndOfProgramMessage { get; set; }

        public int PassPercent { get; set; }

        [MaxLength(100)]
        public string PublishedById { get; set; }
        [Display(Name = "Allow users to preview answer summary")]
        public bool PreviewAnswerSummary { get; set; }
        [Display(Name = "Allow users to generate certificate")]
        public bool GenerateCertificate { get; set; }
        [Display(Name = "Display In List of Training/Survey")]
        public bool DisplayInTrainingList { get; set; }
        [Display(Name = "Show left navigation")]
        public bool ShowLeftNavigation { get; set; }
        [Display(Name = "Force sequential navigation")]
        public bool EnableSequentialNavigation { get; set; }



        public Presentation()
        {
            Version = "1.0";
        }



    }


}
using JOIN_Data.Models.UtilityModels;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text;

namespace JOIN_Data.Models.CoreModels
{
    internal class Status : CommonModelProperties
    {
        [MaxLength(100)]
        public string Label { get; set; }
        public bool MarkAsClosed { get; set; }
        public bool IncludeInHDTime { get; set; }
        public bool IncludeInDeveloperTime { get; set; }
    }
}
using JOIN_Data.Models.UtilityModels;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text;

namespace JOIN_Data.Models.CoreModels
{
    internal class Ticket : CommonModelProperties
    {
        public bool IsApplicationTicket { get; set; }
        public int? ApplicationId { get; set; }
        public bool IsJAGCNetCustomer { get; set; }
        public bool IsAuthenticatedCustomer { get; set; }
        [MaxLength(300)]
        public string CustomerName { get; set; }
        [MaxLength(300)]
        public string CustomerEmail { get; set; }
        [MaxLength(300)]
        public string CustomerPhone { get; set; }
        public Status Status { get; set; }

        public Guid? AssignedToUUID { get; set; }
        [MaxLength(1000)]
        public string Summary { get; set; }
        [MaxLength(8000)]
        public string Description { get; set; }
        [MaxLength(8000)]
        public string Solution { get; set; }

    }
}
using JOIN_Data.Models.UtilityModels;
using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace JOIN_Data.Models.CoreModels
{
    public class UserSetting : CommonAdminModelProperties
    {

        [MaxLength(50)]
        public string JAGCProfileUUID { get; set; }
        [Display(Name = "Allow Manage Keywords")]
        public bool ManageKeywords { get; set; }
        [Display(Name = "Allow Manage Users")]
        public bool ManageUsers { get; set; }
        [Display(Name = "Allow Run Reports")]
        public bool AllowRunReports { get; set; }
        public bool PreviewEnabled { get; set; }
        public int PreviewBarPosition { get; set; }
        public bool DefaultToVerticalSplitView { get; set; }
        [NotMapped]
        public string CreatedBy { get; set; }

    }
}
using System;
using System.ComponentModel.DataAnnotations;

namespace JOIN_Data.Models.LogModels
{
    public class AuditLogDetail
    {
        public int Id { get; set; }
        public int LogHeaderId { get; set; }
        [MaxLength(200)]
        public string PropertyName { get; set; }
        [MaxLength(400)]
        public string PropertyLabel { get; set; }
        [MaxLength(2000)]
        public string OldValue { get; set; }
        [MaxLength(2000)]
        public string NewValue { get; set; }
        [MaxLength(1000)]
        public string ActivityMessage { get; set; }

        public AuditLogHeader LogHeader { get; set; }
        public string ChangeDetails
        {
            get
            {
                if (!String.IsNullOrEmpty(ActivityMessage))
                {
                    return ActivityMessage;
                }

                if (String.IsNullOrEmpty(OldValue) && !String.IsNullOrEmpty(NewValue))
                {
                    return PropertyLabel + " > " + NewValue;
                }
                if (!String.IsNullOrEmpty(OldValue) && String.IsNullOrEmpty(NewValue))
                {
                    return PropertyLabel + " > " + OldValue;
                }
                return PropertyLabel + " > " + OldValue + " -> " + NewValue;
            }
        }
        public string ChangeIcon
        {
            get
            {
                if (!String.IsNullOrEmpty(ActivityMessage))
                {
                    return "bi bi-info-circle text-info";
                }

                if (String.IsNullOrEmpty(OldValue) && !String.IsNullOrEmpty(NewValue))
                {
                    return "bi bi-plus-circle text-success";
                }
                if (!String.IsNullOrEmpty(OldValue) && String.IsNullOrEmpty(NewValue))
                {
                    return "bi bi-dash-circle text-danger";
                }
                return "bi bi-arrow-right-circle text-primary";

            }
        }
    }

}
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace JOIN_Data.Models.LogModels
{
    public class AuditLogHeader
    {
        public int Id { get; set; }
        public int PrimaryKey { get; set; }
        [MaxLength(100)]
        public string JAGCProfileUUID { get; set; }
        public DateTime LogDate { get; set; }
        [MaxLength(200)]
        public string ClassName { get; set; }
        [MaxLength(1000)]
        public string ActivityMessage { get; set; }
        public int ChangeType { get; set; }
        public virtual List<AuditLogDetail> AuditLogDetails { get; set; }
        [NotMapped]
        public string UserName { get; set; }

        public AuditLogHeader()
        {
            AuditLogDetails = new List<AuditLogDetail>();
        }
    }
}
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;

namespace JOIN_Data.Models.LogModels
{
    public class AuditLogLookupMap
    {
        public int Id { get; set; }
        [MaxLength(200)]
        public string ClassName { get; set; }
        [MaxLength(400)]
        public string PropertyName { get; set; }
        [MaxLength(400)]
        public string LookupTable { get; set; }
        [MaxLength(200)]
        public string LookupField { get; set; }
        [MaxLength(200)]
        public string KeyField { get; set; }
    }
}
using JOIN_Data.Models.UtilityModels;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;

namespace JOIN_Data.Models.LogModels
{
    public class ErrorLog : PropertyAccessor
    {
        public int Id { get; set; }
        [Display(Name = "Log Date")]
        public DateTime LogDate { get; set; }
        [MaxLength(100)]
        public string JAGCProfileUUID { get; set; }
        [MaxLength(100)]
        public string IPAddress { get; set; }
        [Display(Name = "Error Message")]
        [MaxLength(1000)]
        public string ErrorMessage { get; set; }
        [Display(Name = "Error Discription")]
        public string ErrorDiscription { get; set; }

        public string GetListHTML()
        {
            string html = "<div >" + ErrorMessage + "</div>";
            html += "<div class='text-muted'>" + LogDate.ToLocalTime() + "</div>";
            return html;
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace JOIN_Data.Models.UtilityModels;

public class ActionBarBottomInfo
{
    public string SaveButtonLabel { get; set; }
    public bool ShowCancel { get; set; } = true;

    public string Route { get; set; }
    public string RouteParams { get; set; }
    public string ModelId { get; set; }
    public string ContainerId { get; set; }
    public string CancelAction { get; set; }
    public string SaveAction { get; set; }
    public string SaveRunMethod { get; set; }




    public ActionBarBottomInfo(string saveBtnLabel, string route, string modelId, string containerId)
    {
        SaveButtonLabel = saveBtnLabel;
        Route = route;
        ModelId = modelId;
        ContainerId = containerId;
        RouteParams = "";
    }


    public string GetCancelAction()
    {
        if (!string.IsNullOrEmpty(CancelAction))
            return CancelAction;
        else
        {
            var action = $"loadPartialBtn(this, '/{Route}/{ModelId}', {{{RouteParams}}},'{ContainerId}')";
            return action;
        }
    }
    public string GetSaveAction()
    {
        if (!string.IsNullOrEmpty(SaveAction)) return SaveAction;

        if (string.IsNullOrEmpty(SaveRunMethod))
            return "savePartial(this)";
        else
        {
            var runMethod = string.IsNullOrEmpty(SaveRunMethod) ? "" : $",{{'runMethod':{SaveRunMethod}}}";
            var action = $"savePartial(this{runMethod})";
            return action;
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace JOIN_Data.Models.UtilityModels;

public class ActionBarInfo
{
    public bool ShowActionBar { get; set; } = true;
    public bool ShowEdit { get; set; } = true;
    public bool ShowDelete { get; set; } = true;
    public bool ShowCopy { get; set; }
    public bool ShowLog { get; set; } = true;

    public string Route { get; set; }
    public string ModelId { get; set; }
    public string ContainerId { get; set; }
    public string DeleteAction { get; set; }
    public string CopyAction { get; set; }
    public string DeleteRunMethod { get; set; }
    public string EditAction { get; set; }
    public string LogAction { get; set; }

    public ActionBarInfo(string route, string modelId, string containerId)
    {
        Route = route;
        ModelId = modelId;
        ContainerId = containerId;
    }
    public string GetDeleteAction()
    {
        if (!string.IsNullOrEmpty(DeleteAction))
            return DeleteAction;
        else
        {
            var runMethod = string.IsNullOrEmpty(DeleteRunMethod) ? "" : $",{{'runMethod':{DeleteRunMethod}}}";
            var modelId = string.IsNullOrEmpty(ModelId) ? "" : $"/{ModelId}";
            var action = $"if(confirm('Are you sure you want to delete this record?'))loadPartialBtn(this, '/{Route}{modelId}/delete', {{}},'{ContainerId}'{runMethod})";
            return action;
        }
    }

    public string GetEditAction()
    {
        if (!string.IsNullOrEmpty(EditAction))
            return EditAction;
        else
        {
            var modelId = string.IsNullOrEmpty(ModelId) ? "" : $"/{ModelId}";
            var action = $"loadPartialBtn(this, '/{Route}{modelId}/edit', {{}},'{ContainerId}')";
            return action;
        }
    }
    public string GetCopyAction()
    {
        if (!string.IsNullOrEmpty(EditAction))
            return CopyAction;
        else
        {
            var modelId = string.IsNullOrEmpty(ModelId) ? "" : $"/{ModelId}";
            var action = $"loadPartialBtn(this, '/{Route}{modelId}/copy', {{}},'{ContainerId}')";
            return action;
        }
    }
    public string GetLogAction()
    {
        if (!string.IsNullOrEmpty(LogAction))
            return LogAction;
        else
        {
            var modelId = string.IsNullOrEmpty(ModelId) ? "" : $"/{ModelId}";
            var action = $"loadPartialBtn(this, '/{Route}{modelId}/audit-log', {{}},'auditLogBody',{{'runMethod':function(){{openModal('auditLogModal')}}}})";
            return action;
        }
    }
}
using JOIN_Data.Utils;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;

namespace JOIN_Data.Models.UtilityModels
{
    public class CommonAdminModelProperties : CommonModelProperties
    {

        public bool Active { get; set; }
        [Display(Name = "Active")]
        public string ActiveIcon
        {
            get
            {
                return Active ? IconConstants.ACTIVE_ICON : IconConstants.INACTIVE_ICON_SECONDARY;
            }
        }
    }
}
using JOIN_Data.Models.CoreModels;
using JOIN_Data.Models.UtilityModels;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq.Expressions;
using System.Text;

namespace JOIN_Data.Models.UtilityModels
{
    public class CommonModelProperties : ICommonModelFields
    {
        public int Id { get; set; }
        [Display(Name = "Date Created")]
        [DataType(DataType.Date)]
        public DateTime DateCreated { get; set; }

        [Display(Name = "Created By")]
        [MaxLength(50)]
        public string CreatedById { get; set; }

        [Display(Name = "Modified By")]
        [MaxLength(50)]
        public string ModifiedById { get; set; }
        [Display(Name = "Date Modified")]
        [DataType(DataType.Date)]
        public DateTime DateModified { get; set; }

        public bool IsNewRecord
        {
            get
            {
                return Id == 0;
            }
        }
        public object GetPropertyValue(string prop)
        {
            return GetType().GetProperty(prop).GetValue(this, null);
        }




    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;

namespace JOIN_Data.Models.UtilityModels
{
    public interface ICommonModelFields
    {
        int Id { get; set; }
        string CreatedById { get; set; }
        string ModifiedById { get; set; }
        DateTime DateCreated { get; set; }
        DateTime DateModified { get; set; }


    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace JOIN_Data.Models.UtilityModels
{
    public class PropertyAccessor
    {
        public object GetPropertyValue(string prop)
        {
            var s = GetType();
            var ss = s.GetProperty(prop);
            var sss = ss.GetValue(this, null);
            return GetType().GetProperty(prop).GetValue(this, null);
        }
    }
}
using JOIN_Data.Enums;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace JOIN_Data.Models.UtilityModels
{
    public class ViewStatusInfo
    {
        public string Message { get; set; }

        public AlertTypes? AlertType { get; set; }

        public string GetStyleClass()
        {
            string styleClass = "bg-light";
            switch (AlertType)
            {
                case AlertTypes.Failed:
                    {
                        styleClass = "bg-danger";
                        break;
                    }
                case AlertTypes.Okay:
                    {
                        styleClass = "bg-success";
                        break;
                    }
                case AlertTypes.Warnning:
                    {
                        styleClass = "bg-warning";
                        break;
                    }
                case AlertTypes.Information:
                    {
                        styleClass = "bg-primary";
                        break;
                    }
            }
            return styleClass;
        }
    }
}
using JOIN_Data.Models.UtilityModels;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace JOIN_Data.Models.ViewModels;

public class ApplicantView : PropertyAccessor
{
    public int AppId { get; set; }
    public int UserId { get; set; }
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public string Email { get; set; }
    public DateTime StartDate { get; set; }
    public DateTime? ClosedDate { get; set; }
    public DateTime? SubmittedDate { get; set; }
    public string Status { get; set; }
    public int BoardId { get; set; }
    public string BoardName { get; set; }
    public string FullName { get; set; }
    public bool ShowNavigation { get; set; }

    public ApplicantView()
    {
    }
}
using JAGCNet.Library.Models;
using JOIN_Data.Models.CoreModels;

namespace JOIN_Data.Models.ViewModels
{
    public class ApplicationUserViewModel
    {
        public JAGCProfile JAGCProfile { get; set; }
        public UserSetting UserSetting { get; set; }
        public ApplicationMembership Membership { get; set; }
    }
}
using JOIN_Data.Models.UtilityModels;
using JOIN_Data.Services;
using RtfPipe;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace JOIN_Data.Models.ViewModels;

public class ApplicationViewMode : PropertyAccessor
{
    public int AppId { get; set; }
    [DisplayName("Application Name")]
    public string AppName { get; set; }
    [DisplayName("Created Date")]
    public DateTime CreatedDate { get; set; }
    [DisplayName("Created By")]
    public string CreatedBy { get; set; }
    [DisplayName("Last Updated Date")]
    public DateTime LastUpdatedDate { get; set; }
    [DisplayName("Last Updated By")]
    public string LastUpdatedBy { get; set; }
    [DisplayName("Status")]
    public string Status { get; set; }
    [DisplayName("Applicant Count")]
    public int ApplicantCount { get; set; }
    public List<SectionViewMode>? Sections { get; set; }
    [DisplayName("Is Active")]
    public bool IsActive { get; set; }
    public bool IsDraft { get; set; }
    [DisplayName("Instruction")]
    public string? Instruction { get; set; }
    public string GetListHTML()
    {
        var textClass = IsActive == false || IsDraft ? "text-danger" : "";
        string html = "<div class='fw-bold " + textClass + "'>" + AppName + "</div>";
        html += "<div>" + AppName + "</div>";
        return html;
    }
}
using JOIN_Data.Models.UtilityModels;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace JOIN_Data.Models.ViewModels
{
    public class CategoryViewMode : PropertyAccessor
    {
        public int Id { get; set; }
        public bool isActive { get; set; }
        public string Name { get; set; }
        public int QuestionsCount { get; set; }
        public List<QuestionViewMode> Questions { get; set; }
    }
}using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace JOIN_Data.Models.ViewModels;

public class ChartViewModel
{
    public string ChartId { get; set; }
    public string Name { get; set; }

    public List<string> Labels { get; set; }
    public List<int> Counts { get; set; }

    public string ChartTitle
    {
        get
        {
            string title = "";
            if (string.IsNullOrWhiteSpace(Name) == false)
            {
                title = Name;
            }
            title += " (" + Counts.Sum() + ")";
            return title;
        }
    }
    public List<string> GetChartColors(IConfiguration config)
    {
        var colors = new List<string>();
        string[] colorConfig = config.GetSection("ChartColors").Get<string[]>();
        int i = 0;
        foreach (var label in Labels)
        {
            if (i >= colorConfig.Count())
            {
                i = 0;
            }
            colors.Add(colorConfig[i]);
            i++;
        }
        return colors;
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace JOIN_Data.Models.ViewModels;

public class NewAppViewModel
{
    public string AppName { get; set; }
    public string Instraction { get; set; }
    public List<Sections> Sections { get; set; }
}
public class Sections
{
    public string Name { get; set; }
    public List<Categories> Categories { get; set; }
}
public class Categories
{
    public string Name { get; set; }
}
using JOIN_Data.Models.UtilityModels;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace JOIN_Data.Models.ViewModels
{
    public class QuestionViewMode : PropertyAccessor
    {
        public int ID { get; set; }
        public string? Description { get; set; }
        public string AskedQuestion { get; set; }
        public string Type { get; set; }
        public bool IsActive { get; set; }
        public bool IsMultiAns { get; set; }
        public bool IsRequired { get; set; }
    }
}
using DocumentFormat.OpenXml.Wordprocessing;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace JOIN_Data.Models.ViewModels;

public sealed class ReportTypeViewModel //: ClaimListViewModel
{
    internal int DepositActivityID;
    internal int Total;

    public ReportTypeViewModel()
    {
    }
    public string Name { get; set; }
    public decimal TFL { get; set; }
    [Display(Name = "MTF Recoveries")]
    public string MTFRecoveries { get; set; }
    [Display(Name = "Affirmative Claims Office Status")]
    public string AffirmativeClaimsOfficeStatus { get; set; }
    [Display(Name = "Affirmative Claims Office Status (Memorandum)")]
    public string AffirmativeClaimsOfficeStatus_Memorandum { get; set; }
    public string Count { get; set; }
    [Display(Name = "Lost Wages")]
    public decimal LostWages { get; set; }
    [Display(Name = "Fiscal Year")]
    public int FiscalYear { get; set; }
    [Display(Name = "Number Asserted")]
    public int NumberAsserted { get; set; }
    [Display(Name = "Amount Asserted")]
    public decimal AmountAsserted { get; set; }
    [Display(Name = "Tricare Recoveries")]
    public decimal TRICARERecoveries { get; set; }
    [Display(Name = "Recovered For MTF")]
    public decimal RecoveredforMTF { get; set; }
    [Display(Name = "Amount Received")]
    public decimal AmountReceived { get; set; }
    [Display(Name = "Number Received")]
    public int NumberReceived { get; set; }
    [Display(Name = "Number RIK")]
    public int NumberRIK { get; set; }
    [Display(Name = "Amount RIK")]
    public decimal AmountRIK { get; set; }
    [Display(Name = "Opened Date")]
    public DateTime? Opened_Date { get; set; }
    [Display(Name = "Action Date")]
    public DateTime? ActionDate { get; set; }
    [Display(Name = "Closed Date")]
    public DateTime? ClosedDate { get; set; }
    [Display(Name = "Real Property Demand Amount")]
    public decimal RealPropertyDemandAmount { get; set; }
    [Display(Name = "Military Equipment Demand Amount")]
    public decimal MilitaryEquipmentDemandAmount { get; set; }
    [Display(Name = "Costs Asserted")]
    public decimal CostsAsserted { get; set; }
    [Display(Name = "Number Resolved")]
    public int NumberResolved { get; set; }
    [Display(Name = "Total MAC Recoveries")]
    public decimal TotalMACRecoveries { get; set; }
    [Display(Name = "Recovered Lost Wages")]
    public decimal RecoveredLostWages { get; set; }
    [Display(Name = "Recovered for Tricare")]
    public decimal RecoveredforTricare { get; set; }
    public decimal North { get; set; }
    public decimal South { get; set; }
    public decimal West { get; set; }
    public decimal OCONUS { get; set; }
    public decimal UNK { get; set; }
    [Display(Name = "Injured Party Last Name")]
    public string InjuredPartyLastName { get; set; }
    [Display(Name = "Injured Party First Name")]
    public string InjuredPartyFirstName { get; set; }
    [Display(Name = "Monthly Affirmative Claims")]
    public string MonthlyAffirmativeClaims { get; set; }
    [Display(Name = "Facility Name")]
    public string FacilityName { get; set; }
    [Display(Name = "Service")]
    public string MTFService { get; set; }
    [Display(Name = "Fund Code")]
    public string AccountingCode { get; set; }
    [Display(Name = "Location")]
    public string MTFLocation { get; set; }
    public string Person { get; set; }
    [Display(Name = "Entered Date")]
    public DateTime? EnteredDate { get; set; }
    [Display(Name = "Date of Incident")]
    public DateTime? DateofIncident { get; set; }
    [Display(Name = "Date of Assertion")]
    public DateTime? DateofAssertion { get; set; }
    [Display(Name = "Date Demanded")]
    public DateTime? DateDemanded { get; set; }
    [Display(Name = "SOL Date")]
    public DateTime? SOL_Date { get; set; }
    [Display(Name = "Daysto SOL Expiration")]
    public int DaystoSOLExpiration { get; set; }
    [Display(Name = "Deposit Date")]
    public DateTime DepositDate { get; set; }
    public string Status { get; set; }
    [Display(Name = "SOL Status")]
    public string SOLStatus { get; set; }
    [Display(Name = "DOJ Claim")]
    public string DOJClaim { get; set; }
    [Display(Name = "First Name")]
    public string FirstName { get; set; }
    [Display(Name = "Last Name")]
    public string LastName { get; set; }
    [Display(Name = "Claim Type")]
    public string ClaimType { get; set; }
    [Display(Name = "Deposit Activity Type")]
    public string DepositActivityType { get; set; }
    [Display(Name = "MTF Name")]
    public string MTFName { get; set; }
    [Display(Name = "Opened Status")]
    public static bool OpenedStatus { get; set; }
    [Display(Name = "Closed Status")]
    public static bool ClosedStatus { get; set; }
    public string Active { get; set; }
    public string IsAsserted { get; set; }
    public string TRICareRegion { get; set; }
    public string OfficeNumber { get; set; }
    public decimal RIKAmount { get; set; }
    public string Month { get; set; }
    [Display(Name = "FY YTD")]
    public string FY_YTD { get; set; }
    public int MonthInt { get; set; }
}

public class ReportParam
{
    //Parameters
    public bool ShowSummery { get; set; }
    public string Signature { get; set; }
    public string RecipientName { get; set; }
    public string Salutation { get; set; }
    public string DateCriteria { get; set; }
    public bool IsActive { get; set; }
    public string OpenCloseClaim { get; set; }
    public int SelectedMonth { get; set; }
    public int RecoveryType { get; set; }
    public DateTime? StartDate { get; set; }
    public DateTime? EndDate { get; set; }
    public int Year { get; set; }
    public int StartFiscalYear { get; set; }
    public int EndFiscalYear { get; set; }
    public decimal AssertionAmount { get; set; }
    public DateTime? Date { get; set; }
}
using JOIN_Data.Models.UtilityModels;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace JOIN_Data.Models.ViewModels;

public class SectionViewMode : PropertyAccessor
{
    public int SectionId { get; set; }
    public string SectionName { get; set; }
    public int CategoriesCount { get; set; }
    public int QuestionsCount { get; set; }
    public bool isActive { get; set; }
    public List<CategoryViewMode> Categories { get; set; }   
}

using JOIN_Data.Models.UtilityModels;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;

namespace JOIN_Data.Models.ViewModels
{
    public class UserListViewModel : PropertyAccessor
    {
        public string JAGCProfileUUID { get; set; }
        [Display(Name = "Name")]
        public string FullName { get; set; }
        public string Rank { get; set; }
        [Display(Name = "Active in JAGCNet?")]
        public string ProfileActive { get; set; }
        [Display(Name = "Active in Application?")]
        public string MembershipActive { get; set; }
        [Display(Name = "Last Login")]
        public DateTime? LastLogin { get; set; }
        [Display(Name = "Duty Title")]
        public string DutyTitle { get; set; }

        public string GetListHTML()
        {
            string html = "<div class='font-weight-bold'>" + FullName + "</div>";
            html += "<div class='text-muted'>Last Login " + LastLogin + "</div>";
            return html;
        }

    }
}

using CommonUtil.ListViews;
using JOIN_Data.Models.CoreModels;
using JOIN_Data.Models.LogModels;
using JOIN_Data.Models.ViewModels;
using Microsoft.EntityFrameworkCore;

namespace JOIN_Data.Persistence
{
    public class ApplicationDbContext : DbContext
    {
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options)
        {
        }
        //public ApplicationDbContext() : base()
        //{
        //    this.Database.EnsureCreated();
        //}
        //protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        //{
        //    if (!optionsBuilder.IsConfigured)
        //    {
        //        optionsBuilder.UseSqlServer("Server=140.16.95.207;Database=JOIN;TrustServerCertificate=True;User ID=; Password=");
        //    }
        //}

        public DbSet<Presentation> Presentations { get; set; }
        public DbSet<UserSetting> UserSettings { get; set; }
        public DbSet<KeyValueLookup> KeyValueLookups { get; set; }
        public DbSet<KeyValueType> KeyValueTypes { get; set; }

        //View Settings
        public DbSet<UserListView> UserListViews { get; set; }
        public DbSet<UserDisplayColumn> UserDisplayColumns { get; set; }
        public DbSet<UserExportColumn> UserExportColumns { get; set; }

        //public DbSet<UploadedFile> UploadedFiles { get; set; }

        public DbSet<ErrorLog> ErrorLogs { get; set; }
        public DbSet<AuditLogHeader> AuditLogHeaders { get; set; }
        public DbSet<AuditLogDetail> AuditLogDetails { get; set; }
        public DbSet<AuditLogLookupMap> AuditLogLookupMaps { get; set; }

        public DbSet<UserListViewModel> UserView { get; set; }

        //Main tables Config
        public DbSet<Application> Application { get; set; }
        public DbSet<Board> Board { get; set; }
        public DbSet<Section> Section { get; set; }
        public DbSet<Category> Category { get; set; }
        public DbSet<Question> Question { get; set; }
        public DbSet<Applicant> Applicant { get; set; }
        public DbSet<Answer> Answer { get; set; }
        public DbSet<OnlineUsers> OnlineUser { get; set; }
        //-------------------------------------------------------


        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            //Main tables Config
            modelBuilder.Entity<Application>().HasKey(t => t.Id);
            modelBuilder.Entity<Board>().HasKey(t => t.Id);
            modelBuilder.Entity<Section>().HasKey(t => t.Id);
            modelBuilder.Entity<Category>().HasKey(t => t.Id);
            modelBuilder.Entity<Question>().HasKey(t => t.Id);
            modelBuilder.Entity<Applicant>().HasKey(t => t.Id);
            modelBuilder.Entity<Answer>().HasKey(t => t.Id);
            modelBuilder.Entity<OnlineUsers>().HasKey(t => t.Id);
            //-------------------------------------------------------

            modelBuilder.Entity<Presentation>().ToTable("Presentations", schema: "Slide");

            modelBuilder.Entity<KeyValueLookup>().ToTable("KeyValueLookups", schema: "Config");
            modelBuilder.Entity<KeyValueType>().ToTable("KeyValueTypes", schema: "Config");
            modelBuilder.Entity<UserSetting>().ToTable("UserSettings", schema: "Config");
            modelBuilder.Entity<UserListView>().ToTable("UserListViews", schema: "List");
            modelBuilder.Entity<UserDisplayColumn>().ToTable("UserDisplayColumns", schema: "List");
            modelBuilder.Entity<UserExportColumn>().ToTable("UserExportColumns", schema: "List");
            //modelBuilder.Entity<UploadedFile>().ToTable("UploadedFiles", schema: "CaseChild");

            modelBuilder.Entity<UserListViewModel>().HasNoKey().ToView("Users", schema: "Display");

            modelBuilder.Entity<ErrorLog>().ToTable("ErrorLogs", schema: "Log");
            modelBuilder.Entity<AuditLogHeader>().ToTable("AuditLogHeaders", schema: "Log");
            modelBuilder.Entity<AuditLogDetail>().ToTable("AuditLogDetails", schema: "Log");
            modelBuilder.Entity<AuditLogLookupMap>().ToTable("AuditLogLookupMaps", schema: "Log");

            modelBuilder.Entity<Presentation>().Property(x => x.Key).HasDefaultValueSql("NEWID()");
            modelBuilder.Entity<Presentation>().HasIndex(p => p.Key);


            modelBuilder.Entity<KeyValueType>().HasData(
                new KeyValueType { Id = 1, Name = "Font Names", HasCode = true },
                new KeyValueType { Id = 2, Name = "Font Sizes", HasCode = true },
                new KeyValueType { Id = 3, Name = "Color Codes", HasCode = false }
            );
            //modelBuilder.Query<CaseListViewModel>().ToView("Cases", schema: "Display");
        }
    }
}
using CommonUtil.ListViews;
using JOIN_Data.Models.CoreModels;
using JOIN_Data.Models.LogModels;
using JOIN_Data.Models.ViewModels;
using JOIN_Data.Repositories;
using System.Threading;
using System.Threading.Tasks;

namespace JOIN_Data.Persistence

{
    public interface IUnitOfWork
    {

        IBaseRepository<Presentation> PresentationRepository { get; }
        IBaseRepository<KeyValueType> KeyValueTypeRepository { get; }
        IBaseRepository<KeyValueLookup> KeyValueLookupRepository { get; }
        IBaseRepository<UserListView> UserListViewRepository { get; }
        IBaseRepository<ErrorLog> ErrorLogRepository { get; }
        IBaseRepository<AuditLogHeader> AuditLogHeaderRepository { get; }
        IBaseRepository<UserSetting> UserSettingRepository { get; }
        IBaseRepository<UserListViewModel> UserQueryRepository { get; }

        //Main tables Config
        public IBaseRepository<Application> ApplicationRepository { get; }
        public IBaseRepository<Board> BoardRepository { get; }
        public IBaseRepository<Section> SectionRepository { get; }
        public IBaseRepository<Category> CategoryRepository { get; }
        public IBaseRepository<Question> QuestionRepository { get; }
        public IBaseRepository<Applicant> ApplicantRepository { get; }
        public IBaseRepository<Answer> AnswerRepository { get; }
        public IBaseRepository<OnlineUsers> OnlineUserRepository { get; }
        //-------------------------------------------------------

        void Complete();
        Task CompleteAsync();
        Task<int> CompleteAsync(CancellationToken cancellationToken);
        Task<int> CompleteAsync(CancellationToken cancellationToken, string userId = "", string actvityMessage = "");

    }

}
using CommonUtil.ListViews;
using JOIN_Data.Attributes;
using JOIN_Data.Models.CoreModels;
using JOIN_Data.Models.LogModels;
using JOIN_Data.Models.ViewModels;
using JOIN_Data.Repositories;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

namespace JOIN_Data.Persistence
{
    public class UnitOfWork : IUnitOfWork
    {
        private readonly ApplicationDbContext context;
        public IBaseRepository<Presentation> PresentationRepository { get; }
        public IBaseRepository<KeyValueType> KeyValueTypeRepository { get; }
        public IBaseRepository<KeyValueLookup> KeyValueLookupRepository { get; }
        public IBaseRepository<UserListView> UserListViewRepository { get; }
        public IBaseRepository<ErrorLog> ErrorLogRepository { get; }
        public IBaseRepository<AuditLogHeader> AuditLogHeaderRepository { get; }
        public IBaseRepository<UserSetting> UserSettingRepository { get; }

        public IBaseRepository<UserListViewModel> UserQueryRepository { get; }


        //Main tables Config
        public IBaseRepository<Application> ApplicationRepository { get; }
        public IBaseRepository<Board> BoardRepository { get; }
        public IBaseRepository<Section> SectionRepository { get; }
        public IBaseRepository<Category> CategoryRepository { get; }
        public IBaseRepository<Question> QuestionRepository { get; }
        public IBaseRepository<Applicant> ApplicantRepository { get; }
        public IBaseRepository<Answer> AnswerRepository { get; }
        public IBaseRepository<OnlineUsers> OnlineUserRepository { get; }
        //-------------------------------------------------------
        public UnitOfWork(ApplicationDbContext context)
        {
            this.context = context;
            //            FileRepository = new FileRepository(context);
            PresentationRepository = new PresentationRepository(context);
            KeyValueTypeRepository = new KeyValueTypeRepository(context);
            KeyValueLookupRepository = new KeyValueLookupRepository(context);
            UserListViewRepository = new UserListViewRepository(context);

            ErrorLogRepository = new ErrorLogRepository(context);
            AuditLogHeaderRepository = new AuditLogHeaderRepository(context);
            UserSettingRepository = new UserSettingRepository(context);

            UserQueryRepository = new UserQueryRepository(context);

            //Main tables Config
            ApplicationRepository = new ApplicationRepository(context);
            BoardRepository = new BoardRepository(context);
            SectionRepository = new SectionRepository(context);
            CategoryRepository = new CategoryRepository(context);
            QuestionRepository = new QuestionRepository(context);
            ApplicantRepository = new ApplicantRepository(context);
            AnswerRepository = new AnswerRepository(context);
            OnlineUserRepository = new OnlineUserRepository(context);
            //-------------------------------------------------------
        }
        public async Task<int> CompleteAsync(CancellationToken cancellationToken)
        {
            return await context.SaveChangesAsync(cancellationToken);
        }
        public async Task CompleteAsync() => await context.SaveChangesAsync();
        public void Complete() => context.SaveChanges();

        public async Task<int> CompleteAsync(CancellationToken cancellationToken, string userId = "", string actvityMessage = "")
        {

            List<AuditLogHeader> logHeaders = await AuditLog(userId, actvityMessage);
            var saveCount = await context.SaveChangesAsync(cancellationToken);
            //Update any lookup values
            foreach (var header in logHeaders)
            {
                SqlParameter headerId = new SqlParameter("@headerid", header.Id);
                //UNCOMMENT AFTER ADDING THE SP
                await context.Database.ExecuteSqlRawAsync("exec  Procedures.usp_UpdateLogDetails @headerid", headerId);
            }
            return saveCount;

        }


        private async Task<List<AuditLogHeader>> AuditLog(string userId = "", string actvityMessage = "", int changeType = 0)
        {
            List<AuditLogHeader> logHeaders = new List<AuditLogHeader>();
            IEnumerable<string> ExcludedProperties = new List<string>() {
                "CreatedById",
                "DateCreated" ,
                "ModifiedById",
                "DateModified"
            };
            var modifiedEntities = context.ChangeTracker.Entries().Where(p => p.State == EntityState.Modified).ToList();
            var now = DateTime.UtcNow;
            foreach (var change in modifiedEntities)
            {
                var entityName = change.Entity.GetType().Name;
                var primaryKey = context.Model.FindEntityType(change.Entity.GetType()).FindPrimaryKey().Properties.Select(x => x.Name).Single();
                AuditLogHeader logheader = new AuditLogHeader()
                {
                    ClassName = entityName,
                    PrimaryKey = (int)change.CurrentValues[primaryKey],
                    JAGCProfileUUID = userId,
                    LogDate = now,
                    ActivityMessage = actvityMessage,
                    ChangeType = changeType

                };
                List<AuditLogDetail> logDetails = new List<AuditLogDetail>();
                foreach (var property in change.OriginalValues.Properties)
                {
                    //Execlude audit fields
                    if (!ExcludedProperties.Contains(property.Name) && isLoggableProperty(property))
                    {

                        var isDate = false;
                        var isBool = false;
                        if (property.PropertyInfo.PropertyType == typeof(DateTime) || property.PropertyInfo.PropertyType == typeof(DateTime?))
                        {
                            isDate = true;
                        }
                        if (property.PropertyInfo.PropertyType == typeof(bool))
                        {
                            isBool = true;
                        }
                        var originalValue = change.OriginalValues[property]?.ToString();
                        var currentValue = change.CurrentValues[property]?.ToString();

                        if (isDate)
                        {
                            if (DateTime.TryParse(originalValue, out DateTime result))
                            {
                                originalValue = result.Date.ToShortDateString();
                            }
                            if (DateTime.TryParse(currentValue, out DateTime result1))
                            {
                                currentValue = result1.Date.ToShortDateString();
                            }
                        }
                        if (isBool)
                        {
                            if (bool.TryParse(originalValue, out bool b))
                            {
                                originalValue = b ? "Yes" : "No";
                            }
                            if (bool.TryParse(currentValue, out bool b1))
                            {
                                currentValue = b1 ? "Yes" : "No";
                            }
                        }

                        if (string.Compare(originalValue ?? "", currentValue ?? "", false) != 0)
                        {

                            logDetails.Add(new AuditLogDetail()
                            {
                                NewValue = currentValue?.ToString(),
                                OldValue = originalValue?.ToString(),
                                PropertyName = property.Name,
                                PropertyLabel = GetPropertyLabel(property),
                            });
                        }
                    }
                }
                logheader.AuditLogDetails = logDetails;
                if (logheader.AuditLogDetails.Count() > 0)
                {
                    await AuditLogHeaderRepository.AddAsync(logheader);
                    logHeaders.Add(logheader);
                }
            }
            return logHeaders;
        }
        private string GetPropertyLabel(IProperty property)
        {
            PropertyInfo propertyInfo = property.PropertyInfo;
            string label = propertyInfo.Name;
            if (Attribute.IsDefined(propertyInfo, typeof(DisplayAttribute)))
            {
                DisplayAttribute dispAtt = (DisplayAttribute)Attribute.GetCustomAttribute(
                  propertyInfo, typeof(DisplayAttribute));
                label = dispAtt.Name;

            }
            return label;
        }
        private bool isLoggableProperty(IProperty property)
        {
            PropertyInfo propertyInfo = property.PropertyInfo;
            return !Attribute.IsDefined(propertyInfo, typeof(IgnoreLoggingAttribute));
        }



    }
}
using JOIN_Data.Models.LogModels;
using JOIN_Data.Persistence;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace JOIN_Data.Repositories
{
    public class AuditLogHeaderRepository : BaseRepository<AuditLogHeader>
    {
        private readonly ApplicationDbContext context;

        public AuditLogHeaderRepository(ApplicationDbContext context) : base(context)
        {
            this.context = context;
            setIncludes();
        }
        private void setIncludes()
        {
            IncludeFields.Add("AuditLogDetails");
            // IncludeFields.Add("ApplicationUser");
        }
    }
}

using CommonUtil.ListViews;
using JOIN_Data.Persistence;
using JOIN_Data.Utils;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;

namespace JOIN_Data.Repositories
{
    public class BaseRepository<T> : IBaseRepository<T> where T : class
    {
        private ApplicationDbContext context;
        public List<string> IncludeFields { get; set; }

        protected ApplicationDbContext Context
        {
            get { return context; }
            set { context = value; }
        }

        public BaseRepository(ApplicationDbContext context)
        {
            this.context = context;
            IncludeFields = new List<string>();
        }
        public async Task AddAsync(T entity)
        {
            await context.Set<T>().AddAsync(entity);
        }

        public void Update(T entity)
        {
            context.Entry(entity).State = EntityState.Modified;
        }

        public void Remove(T entity)
        {
            context.Set<T>().Remove(entity);
        }
        public virtual async Task RemoveAllAsync(Expression<Func<T, bool>> predicate)
        {
            var collToRemove = await GetListAsync(predicate, false);
            context.Set<T>().RemoveRange(collToRemove);
        }
        public virtual async Task<bool> ExistsAsync(int id)
        {
            T obj = await FindByIdAsync(id);
            return obj != null;
        }
        public virtual async Task<bool> ExistsAsync(Expression<Func<T, bool>> predicate)
        {
            T obj = await FindByFieldAsync(predicate);
            return obj != null;
        }
        public virtual async Task<T> FindByIdAsync(int id)
        {
            return await context.Set<T>().FindAsync(id);
        }


        private IQueryable<T> _addIncludes(IQueryable<T> queriable)
        {
            foreach (string field in IncludeFields)
            {
                queriable = queriable.Include(field);
            }
            return queriable;
        }
        public void AddIncludeField(string includeField)
        {
            if (!IncludeFields.Contains(includeField))
            {
                IncludeFields.Add(includeField);
            }
        }

        public virtual async Task<T> FindByFieldAsync(Expression<Func<T, bool>> predicate)
        {
            return await context.Set<T>().Where(predicate).FirstOrDefaultAsync();
        }
        public virtual async Task<T> FindByFieldAsync(Expression<Func<T, bool>> predicate, bool loadRelated)
        {
            if (loadRelated)
            {
                var queriable = context.Set<T>().AsQueryable();
                queriable = _addIncludes(queriable);
                return await queriable.Where(predicate).FirstOrDefaultAsync();
            }
            return await context.Set<T>().Where(predicate).FirstOrDefaultAsync();
        }

        public virtual async Task<T> FindByFieldAsync(Expression<Func<T, bool>> predicate, List<string> includeFields)
        {
            var queriable = context.Set<T>().AsQueryable();
            foreach (string field in includeFields)
            {
                queriable = queriable.Include(field);
            }
            return await queriable.Where(predicate).FirstOrDefaultAsync();
        }

        private IQueryable<T> _getQueriable(bool track)
        {
            if (!track)
            {
                return context.Set<T>().AsNoTracking().AsQueryable();
            }
            return context.Set<T>().AsQueryable();
        }
        private IQueryable<T> _setOrderBy(IQueryable<T> queriable,
            Expression<Func<T, object>> categorizedBy = null,
            Expression<Func<T, object>> orderBy = null,
            Expression<Func<T, object>> thenBy = null,
            string sortOrder = "asc")
        {
            if (categorizedBy != null)
            {
                if (orderBy == null)
                {
                    return queriable.OrderBy(categorizedBy);
                }
                if (sortOrder == "asc")
                    return thenBy != null ? queriable.OrderBy(categorizedBy).ThenBy(orderBy).ThenBy(thenBy) : queriable.OrderBy(categorizedBy).ThenBy(orderBy);
                else
                    return thenBy != null ? queriable.OrderBy(categorizedBy).ThenByDescending(orderBy).ThenBy(thenBy) : queriable.OrderBy(categorizedBy).ThenByDescending(orderBy);
            }


            if (orderBy == null)
            {
                return queriable;
            }
            if (sortOrder == "asc")
                return thenBy == null ? queriable.OrderBy(orderBy) : queriable.OrderBy(orderBy).ThenBy(thenBy);
            else
                return thenBy == null ? queriable.OrderByDescending(orderBy) : queriable.OrderByDescending(orderBy).ThenBy(thenBy);

        }
        private IQueryable<T> _setPredicate(IQueryable<T> queriable, Expression<Func<T, bool>> predicate = null)
        {
            if (predicate != null)
            {
                return queriable.Where(predicate);
            }
            return queriable;
        }
        public virtual async Task<ICollection<T>> GetListAsync(Expression<Func<T, bool>> predicate = null, bool loadRelated = false, Expression<Func<T, object>> orderBy = null, Expression<Func<T, object>> thenBy = null, string sortOrder = "asc", bool track = false)
        {
            IQueryable<T> queriable = _getQueriable(track);
            if (loadRelated)
            {
                queriable = _addIncludes(queriable);
            }
            queriable = _setOrderBy(queriable, null, orderBy, thenBy, sortOrder);
            queriable = _setPredicate(queriable, predicate);
            return await queriable.ToListAsync();
        }
        public virtual async Task<IEnumerable<VM>> GetListAsync<VM>(Expression<Func<T, VM>> columns, Expression<Func<T, bool>> predicate = null, Expression<Func<T, object>> orderBy = null, Expression<Func<T, object>> thenBy = null, string sortOrder = "asc", bool track = false)
        {
            IQueryable<T> queriable = _getQueriable(track);
            queriable = _setOrderBy(queriable, null, orderBy, thenBy, sortOrder);
            queriable = _setPredicate(queriable, predicate);
            return await queriable.Select<T, VM>(columns).ToListAsync();
        }
        public virtual async Task<ICollection<T>> GetListAsync(List<string> includeFields, Expression<Func<T, bool>> predicate = null, Expression<Func<T, object>> orderBy = null, Expression<Func<T, object>> thenBy = null, string sortOrder = "asc", bool track = false)
        {
            IQueryable<T> queriable = _getQueriable(track);
            foreach (string field in includeFields)
            {
                queriable = queriable.Include(field);
            }

            queriable = _setOrderBy(queriable, null, orderBy, thenBy, sortOrder);
            queriable = _setPredicate(queriable, predicate);
            return await queriable.ToListAsync();
        }
        public async Task<int> GetCountAsync(Expression<Func<T, bool>> predicate)
        {

            if (predicate == null)
            {
                return await context.Set<T>().CountAsync();
            }
            else
            {
                return await context.Set<T>().Where(predicate).CountAsync();
            }
        }


        public Expression<Func<T, TVModel>> GetSelectColumns<TVModel>()
        {
            return null;
        }
        public async Task<IEnumerable<VM>> GetListAsync<VM>(Expression<Func<T, bool>> predicate, Expression<Func<T, VM>> columns)
        {
            if (predicate != null)
            {
                return await context.Set<T>().AsNoTracking().Where(predicate).Select<T, VM>(columns).ToListAsync();
            }
            return await context.Set<T>().AsNoTracking().Select<T, VM>(columns).ToListAsync();
        }
        public async Task<IEnumerable<VM>> GetDistinctListAsync<VM>(Expression<Func<T, bool>> predicate, Expression<Func<T, VM>> columns)
        {
            return await context.Set<T>().AsNoTracking().Where(predicate).Select<T, VM>(columns).Distinct().ToListAsync();
        }



        public async Task<IEnumerable<VM>> GetPagedListAsync<VM>(Expression<Func<T, bool>> predicate,
                                Expression<Func<T, VM>> columns = null,
                                Expression<Func<T, object>> orderBy = null,
                                Expression<Func<T, object>> thenBy = null,
                                Expression<Func<T, object>> categorizedBy = null,

                                string sortOrder = "asc",
                                int size = 25,
                                int pageIndex = 1)
        {
            IQueryable<T> query = _getQueriable(false);
            query = _setOrderBy(query, categorizedBy, orderBy, thenBy, sortOrder);
            query = _setPredicate(query, predicate);
            if (size > 0)
            {
                if (pageIndex > 1)
                {
                    return await query.Skip(size * (pageIndex - 1)).Take(size).Select(columns).ToListAsync();
                }
                else
                {
                    return await query.Take(size).Select(columns).ToListAsync();
                }
            }
            else
            {
                return await query.Select(columns).ToListAsync();
            }
        }

        public async Task<IEnumerable<T>> GetPagedListAsync(Expression<Func<T, bool>> predicate,
                                        Expression<Func<T, object>> orderBy = null,
                                        Expression<Func<T, object>> thenBy = null,
                                        Expression<Func<T, object>> categorizedBy = null,
                                        string sortOrder = "asc",
                                        int size = 25,
                                        int pageIndex = 1,
                                        bool loadRelated = false)
        {
            IQueryable<T> query = _getQueriable(false);
            query = _setOrderBy(query, categorizedBy, orderBy, thenBy, sortOrder);
            if (loadRelated)
                query = _addIncludes(query);
            query = _setPredicate(query, predicate);
            if (size > 0)
            {
                if (pageIndex > 1)
                {
                    return await query.Skip(size * (pageIndex - 1)).Take(size).ToListAsync();
                }
                else
                {
                    return await query.Take(size).ToListAsync();
                }
            }
            else
            {
                return await query.ToListAsync();
            }

        }
        public async Task<IEnumerable<T>> GetPagedListAsync(Expression<Func<T, bool>> predicate,
                                Expression<Func<T, object>> orderBy = null,
                                Expression<Func<T, object>> thenBy = null,
                                Expression<Func<T, object>> categorizedBy = null,
                                PagingInfo pageInfo = null,
                                bool loadRelated = false)
        {
            string sortOrder = ListViewConstants.SORT_ORDER_ASC;
            int size = 25;
            int pageIndex = 1;
            if (pageInfo != null)
            {
                sortOrder = pageInfo.SortOrder;
                size = pageInfo.PageSize;
                pageIndex = pageInfo.Page;
            }
            return await GetPagedListAsync(predicate, categorizedBy, orderBy, thenBy, sortOrder, size, pageIndex, loadRelated);

        }
        public async Task<IEnumerable<VM>> GetDistinctListAsync<VM>(Expression<Func<T, bool>> predicate, Expression<Func<T, VM>> columns,
          Expression<Func<VM, object>> orderBy = null)
        {
            IQueryable<VM> query;
            if (predicate != null)
            {
                query = context.Set<T>().AsNoTracking().Where(predicate).Select<T, VM>(columns).Distinct();
            }
            else
            {
                query = context.Set<T>().AsNoTracking().Select<T, VM>(columns).Distinct();
            }

            if (orderBy != null)
            {
                query = query.OrderBy(orderBy);
            }
            return await query.ToListAsync();

        }

        public IQueryable<T> GetQueryable()
        {
            return context.Set<T>().AsQueryable();
        }

    }
}
using JOIN_Data.Models.LogModels;
using JOIN_Data.Persistence;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace JOIN_Data.Repositories
{
    public class ErrorLogRepository : BaseRepository<ErrorLog>
    {
        private readonly ApplicationDbContext context;

        public ErrorLogRepository(ApplicationDbContext context) : base(context)
        {
            this.context = context;
            setIncludes();
        }
        private void setIncludes()
        {
        }
    }
}
using CommonUtil.ListViews;
using DocumentFormat.OpenXml.Bibliography;
using JOIN_Data.Utils;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;

namespace JOIN_Data.Repositories
{
    public interface IBaseRepository<T> where T : class
    {
        /// <summary>
        /// Add an entity to be persisted in the backend. Need to call the CompleteAsync() method of the UnitOfWork class to complete the transaction.
        /// </summary>
        /// <param name="entity"></param>
        /// <returns></returns>
        Task AddAsync(T entity);
        /// <summary>
        /// Update an existing entity. Need to call the CompleteAsync() method of the UnitOfWork class to complete the transaction.
        /// </summary>
        /// <param name="entity"></param>
        /// <returns></returns>
        void Update(T entity);
        /// <summary>
        /// Remove an entity from the persistent store. Need to call the CompleteAsync() method of the UnitOfWork class to complete the transaction.
        /// </summary>
        /// <param name="entity"></param>
        /// <returns></returns>
        void Remove(T entity);
        /// <summary>
        /// Removes all entities matching the predicate criteria from the persistent store. Need to call the CompleteAsync() method of the UnitOfWork class to complete the transaction.
        /// </summary>
        /// <param name="predicate"></param>
        /// <returns></returns>
        Task RemoveAllAsync(Expression<Func<T, bool>> predicate);
        /// <summary>
        /// Checks if an entity exist in the backend by the Id field
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        Task<bool> ExistsAsync(int id);
        /// <summary>
        /// Checks if an entity exist in the backend by the given predicate criteria
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        Task<bool> ExistsAsync(Expression<Func<T, bool>> predicate);
        /// <summary>
        /// Finds and return an entity by the Id field
        /// </summary>
        /// <param name="predicate"></param>
        /// <returns></returns>
        Task<T> FindByIdAsync(int id);
        /// <summary>
        /// Finds and return an entity by the given predicate criteria. This method DOES NOT include any related objects
        /// </summary>
        /// <param name="predicate"></param>
        /// <returns></returns>
        Task<T> FindByFieldAsync(Expression<Func<T, bool>> predicate);
        /// <summary>
        /// Finds and return an entity by the given predicate criteria. This method also includes any related objects defined in the repository "IncludeFields" list.
        /// The "IncludeFields" in the repository contains any related navigation properties to be loaded
        /// </summary>
        /// <param name="predicate"></param>
        /// <param name="loadRelated"></param>
        /// <returns></returns>
        Task<T> FindByFieldAsync(Expression<Func<T, bool>> predicate, bool loadRelated);


        /// <summary>
        /// Finds and return an entity by the given predicate criteria. This method also includes any navigation properties passed to the method in the "includeFields" list parameter.
        /// </summary>
        /// <param name="predicate"></param>
        /// <param name="includeFields"></param>
        /// <returns></returns>
        Task<T> FindByFieldAsync(Expression<Func<T, bool>> predicate, List<string> includeFields);


        /// <summary>
        /// Add a Navigation Property to be included in the resulting object.
        /// This will add any additional navigation properties not available in the "IncludeFields" of the repository.
        /// Adds the new property to the already available fields
        /// </summary>
        /// <param name="includeField"></param>
        /// <returns></returns>
        void AddIncludeField(string includeField);

        /// <summary>
        /// Get a list of entities based on the predicate condtion. This method also includes any related objects defined in the repository "IncludeFields" list.
        /// The "IncludeFields" in the repository contains any related navigation properties to be loaded
        /// </summary>
        /// <param name="predicate"></param>
        /// <param name="loadRelated"></param>
        /// <returns></returns>
        Task<ICollection<T>> GetListAsync(Expression<Func<T, bool>> predicate = null, bool loadRelated = true, Expression<Func<T, object>> orderBy = null,
                Expression<Func<T, object>> thenBy = null, string sortOrder = "asc", bool track = false);
        /// <summary>
        /// Get a list of entities based on the predicate condtion and returns a list of objects based on thew view model passed
        /// </summary>
        /// <param name="predicate"></param>
        /// <param name="columns"></param>
        /// <returns></returns>
        Task<IEnumerable<VM>> GetListAsync<VM>(Expression<Func<T, VM>> columns, Expression<Func<T, bool>> predicate, Expression<Func<T, object>> orderBy = null,
                                         Expression<Func<T, object>> thenBy = null, string sortOrder = "asc", bool track = false);

        Task<ICollection<T>> GetListAsync(List<string> includeFields, Expression<Func<T, bool>> predicate = null, Expression<Func<T, object>> orderBy = null,
                                 Expression<Func<T, object>> thenBy = null, string sortOrder = "asc", bool track = false);

        /// <summary>
        /// Get count of entities matching the given predicate criteria.
        /// </summary>
        /// <param name="predicate"></param>
        /// <returns></returns>
        Task<int> GetCountAsync(Expression<Func<T, bool>> predicate);
        Expression<Func<T, TVModel>> GetSelectColumns<TVModel>();

        /// <summary>
        /// Returns a paged list matching the given predicate criteria
        /// </summary>
        /// <param name="predicate"></param>
        /// <param name="columns"></param>
        /// <param name="orderBy"></param>
        /// <param name="sortOrder"></param>
        /// <param name="size"></param>
        /// <param name="pageIndex"></param>
        /// <returns></returns>
        Task<IEnumerable<VM>> GetPagedListAsync<VM>(Expression<Func<T, bool>> predicate,
                                         Expression<Func<T, VM>> columns,
                                         Expression<Func<T, object>> orderBy = null,
                                         Expression<Func<T, object>> thenBy = null,
                                         Expression<Func<T, object>> categorizedBy = null,
                                         string sortOrder = "asc",
                                         int size = 25,
                                         int pageIndex = 1);

        Task<IEnumerable<T>> GetPagedListAsync(Expression<Func<T, bool>> predicate,
                                        Expression<Func<T, object>> orderBy = null,
                                        Expression<Func<T, object>> thenBy = null,
                                        Expression<Func<T, object>> categorizedBy = null,
                                        string sortOrder = "asc",
                                        int size = 25,
                                        int pageIndex = 1,
                                        bool loadRelated = false);
        Task<IEnumerable<T>> GetPagedListAsync(Expression<Func<T, bool>> predicate,
                                Expression<Func<T, object>> orderBy = null,
                                Expression<Func<T, object>> thenBy = null,
                                Expression<Func<T, object>> categorizedBy = null,
                                PagingInfo pageInfo = null,
                                bool loadRelated = false);


        /// <summary>
        /// Returns a unique list of objects based on the given criteria
        /// </summary>
        /// <param name="predicate"></param>
        /// <param name="columns"></param>
        /// <returns></returns>
        Task<IEnumerable<VM>> GetDistinctListAsync<VM>(Expression<Func<T, bool>> predicate,
                                        Expression<Func<T, VM>> columns,
                                        Expression<Func<VM, object>> orderBy = null);


        IQueryable<T> GetQueryable();
    }


}
using JOIN_Data.Models.CoreModels;
using JOIN_Data.Persistence;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;
using System.Web;

namespace JOIN_Data.Repositories
{
    public class KeyValueLookupRepository : BaseRepository<KeyValueLookup>
    {
        private readonly ApplicationDbContext context;



        public KeyValueLookupRepository(ApplicationDbContext context) : base(context)
        {
            this.context = context;
            setIncludes();
        }
        private void setIncludes()
        {
            IncludeFields.Add("KeyValueType");
        }


    }
}
using JOIN_Data.Models.CoreModels;
using JOIN_Data.Persistence;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;
using System.Web;

namespace JOIN_Data.Repositories
{
    public class KeyValueTypeRepository : BaseRepository<KeyValueType>
    {
        private readonly ApplicationDbContext context;



        public KeyValueTypeRepository(ApplicationDbContext context) : base(context)
        {
            this.context = context;
            setIncludes();
        }
        private void setIncludes()
        {

        }


    }
}
using JOIN_Data.Models.CoreModels;
using JOIN_Data.Persistence;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace JOIN_Data.Repositories;

public class OnlineUserRepository : BaseRepository<OnlineUsers>
{
    private readonly ApplicationDbContext context;
    public OnlineUserRepository(ApplicationDbContext context) : base(context)
    {
        this.context = context;
    }
}
using JOIN_Data.Models.CoreModels;
using JOIN_Data.Persistence;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;
using System.Web;

namespace JOIN_Data.Repositories
{
    public class PresentationRepository : BaseRepository<Presentation>
    {
        private readonly ApplicationDbContext context;



        public PresentationRepository(ApplicationDbContext context) : base(context)
        {
            this.context = context;
            setIncludes();
        }
        private void setIncludes()
        {
            /*
            IncludeFields.Add("Slides");

            IncludeFields.Add("Slides.SlideStyles");
            IncludeFields.Add("Slides.Containers");
            IncludeFields.Add("Slides.Containers.ContainerStyles");
            IncludeFields.Add("Slides.Containers.UploadedFile");
            IncludeFields.Add("Slides.Containers.Question");
            IncludeFields.Add("Slides.Containers.Question.Answers");
            */

        }


    }
}
using CommonUtil.ListViews;
using JOIN_Data.Models.CoreModels;
using JOIN_Data.Persistence;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;
using System.Web;

namespace JOIN_Data.Repositories
{
    public class UserListViewRepository : BaseRepository<UserListView>
    {
        private readonly ApplicationDbContext context;



        public UserListViewRepository(ApplicationDbContext context) : base(context)
        {
            this.context = context;
            setIncludes();
        }
        private void setIncludes()
        {
            IncludeFields.Add("DisplayColumns");
            IncludeFields.Add("ExportColumns");
        }
    }
}


using JOIN_Data.Models.ViewModels;
using JOIN_Data.Persistence;

namespace JOIN_Data.Repositories
{
    public class UserQueryRepository : BaseRepository<UserListViewModel>
    {
        private readonly ApplicationDbContext context;

        public UserQueryRepository(ApplicationDbContext context) : base(context)
        {
            this.context = context;
        }

    }
}
using JOIN_Data.Models.CoreModels;
using JOIN_Data.Persistence;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace JOIN_Data.Repositories
{
    public class UserSettingRepository : BaseRepository<UserSetting>
    {
        private readonly ApplicationDbContext context;

        public UserSettingRepository(ApplicationDbContext context) : base(context)
        {
            this.context = context;
            setIncludes();
        }
        private void setIncludes()
        {

        }
    }
}
using CommonUtil.ListViews;
using JOIN_Data.Models.LogModels;
using JOIN_Data.Models.ViewModels;
using JOIN_Data.Persistence;
using JOIN_Data.Services.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;

namespace JOIN_Data.Services
{
    public class AuditLogService : IAuditLogService
    {
        private readonly IUnitOfWork unitOfWork;
        public AuditLogService(IUnitOfWork unitOfWork)
        {
            this.unitOfWork = unitOfWork;
        }
        public async Task<int> AddAsync(AuditLogHeader model, CancellationToken cancellationToken = default)
        {
            await unitOfWork.AuditLogHeaderRepository.AddAsync(model);
            await unitOfWork.CompleteAsync(cancellationToken);
            return model.Id;
        }

        public async Task<int> AddMessageAsync(int primaryKey, string className, string userId, string message)
        {
            var log = new AuditLogHeader() { PrimaryKey = primaryKey, ClassName = className, LogDate = DateTime.UtcNow, JAGCProfileUUID = userId };
            var details = new AuditLogDetail() { ActivityMessage = message };
            log.AuditLogDetails.Add(details);
            return await AddAsync(log);
        }


        public async Task<IEnumerable<AuditLogHeader>> GetListAsync(string className, int primaryKey)
        {
            Expression<Func<AuditLogHeader, bool>> predicate = a => a.ClassName == className && a.PrimaryKey == primaryKey;
            return (await GetListAsync(predicate, true)).OrderByDescending(o => o.LogDate);
        }

        public async Task<ICollection<AuditLogHeader>> GetListAsync(Expression<Func<AuditLogHeader, bool>> predicate = null, bool loadRelated = false)
        {
            var logHeaders = await unitOfWork.AuditLogHeaderRepository.GetListAsync(predicate, loadRelated);
            return logHeaders;
        }


    }
}
using JOIN_Data.Models.ViewModels;
using JOIN_Data.Persistence;
using JOIN_Data.Services.Interfaces;
using Microsoft.AspNetCore.Http;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace JOIN_Data.Services;

public class DashboardService : IDashboardService
{
    private readonly IUnitOfWork unitOfWork;
    private readonly IHttpContextAccessor httpContextAccessor;
    private readonly IUserService profilesService;
    private readonly IApplicationService applicationService;
    private readonly IApplicantService applicantService;
    public DashboardService(IUnitOfWork unitOfWork,
        IHttpContextAccessor httpContextAccessor,
        IUserService profilesService, 
        IApplicationService applicationService, IApplicantService applicantService)
    {
        this.unitOfWork = unitOfWork;
        this.httpContextAccessor = httpContextAccessor;
        this.profilesService = profilesService;
        this.applicationService = applicationService;
        this.applicantService = applicantService;
    }
    public async Task<ChartViewModel> GetChartViewModel(string appId, string appName, Dictionary<string, int>? chartData = null)
    {
        ChartViewModel vm = new ChartViewModel()
        {
            ChartId = "noData",
            Name = "No Data",
            Labels = { "No Data" },
            Counts = {1}
        };

        if (chartData is not null)
        {
            vm.ChartId = appId;
            vm.Name = appName;
            vm.Labels = chartData.Keys.ToList();
            vm.Counts = chartData.Values.ToList();
        }

        return vm;
    }

    public async Task GetActiveApplicants()
    {
        
    }
}
using CommonUtil.ListViews;
using JOIN_Data.Models.LogModels;
using JOIN_Data.Persistence;
using JOIN_Data.Services.Interfaces;
using System;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;

namespace JOIN_Data.Services
{
    public class ErrorLogService : IErrorLogService
    {
        private readonly IUnitOfWork unitOfWork;
        public ErrorLogService(IUnitOfWork unitOfWork)
        {
            this.unitOfWork = unitOfWork;
        }
        public async Task<int> AddAsync(ErrorLog model, CancellationToken cancellationToken = default(CancellationToken))
        {
            await unitOfWork.ErrorLogRepository.AddAsync(model);
            await unitOfWork.CompleteAsync(cancellationToken);
            return model.Id;
        }

        public async Task<ErrorLog> GetModelAsync(int id, bool loadRelated = false) => await unitOfWork.ErrorLogRepository.FindByFieldAsync(r => r.Id == id, loadRelated);


        public async Task<PagedList<ErrorLog>> GetPagedListAsync(PagingInfo pageInfo, ListView<ErrorLog, ErrorLog> listView, Expression<Func<ErrorLog, object>> sortColumn)
        {
            (string displayCriteria, Expression<Func<ErrorLog, bool>> predicate) = listView.GetPredicate(pageInfo);
            int totalCount = await unitOfWork.ErrorLogRepository.GetCountAsync(predicate);
            Expression<Func<ErrorLog, ErrorLog>> selectColumns = m => new ErrorLog
            {
                Id = m.Id,
                LogDate = m.LogDate,
                JAGCProfileUUID = m.JAGCProfileUUID,
                IPAddress = m.IPAddress,
                ErrorMessage = m.ErrorMessage,
                ErrorDiscription = m.ErrorDiscription
            };
            var recordList = await unitOfWork.ErrorLogRepository.GetPagedListAsync(predicate, selectColumns,
                                 sortColumn, null, null, pageInfo.SortOrder, pageInfo.PageSize, pageInfo.Page);
            return new PagedList<ErrorLog> { TotalCount = totalCount, Items = recordList };
        }
    }
}
using CommonUtil.ListViews;
using JOIN_Data.Enums;
using JOIN_Data.Models.CoreModels;
using JOIN_Data.Models.UtilityModels;
using JOIN_Data.Persistence;
using JOIN_Data.Services.Interfaces;
using JOIN_Data.Utils;
using Microsoft.AspNetCore.Mvc.Rendering;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;

namespace JOIN_Data.Services
{
    public class KeyValueService : IKeyValueService
    {
        private readonly IUnitOfWork unitOfWork;
        public KeyValueService(IUnitOfWork unitOfWork)
        {
            this.unitOfWork = unitOfWork;
        }
        public async Task<int> AddAsync(KeyValueLookup model, string userId, CancellationToken cancellationToken = default)
        {
            AppUtils.SetCommonModelFields(model, userId);
            await unitOfWork.KeyValueLookupRepository.AddAsync(model);
            await unitOfWork.CompleteAsync(cancellationToken);
            return model.Id;
        }
        public async Task<bool> UpdateAsync(KeyValueLookup model, string userId, CancellationToken cancellationToken = default)
        {
            KeyValueLookup keywordInDb = await GetModelAsync(model.Id);
            if (keywordInDb != null)
            {
                keywordInDb.DisplayValue = model.DisplayValue;
                keywordInDb.Code = model.Code;
                keywordInDb.SortOrder = model.SortOrder;
                keywordInDb.Active = model.Active;
                AppUtils.SetCommonModelFields(model, userId);
                unitOfWork.KeyValueLookupRepository.Update(keywordInDb);
            }
            return await unitOfWork.CompleteAsync(cancellationToken, userId) > 0;
        }


        public async Task<bool> IsDuplicateAsync(int id, int typeId, string displayValue)
        {
            KeyValueLookup keywordInDb = null;
            if (id == 0)
            {
                keywordInDb = await unitOfWork.KeyValueLookupRepository.FindByFieldAsync(k => k.KeyValueTypeId == typeId && k.DisplayValue.ToLower() == displayValue.ToLower());
            }
            else
            {
                keywordInDb = await unitOfWork.KeyValueLookupRepository.FindByFieldAsync(k => k.Id != id && k.KeyValueTypeId == typeId && k.DisplayValue.ToLower() == displayValue.ToLower());
            }
            return keywordInDb != null;

        }
        public async Task<KeyValueLookup> GetModelAsync(int id, bool loadRelated = false) => await unitOfWork.KeyValueLookupRepository.FindByFieldAsync(r => r.Id == id, loadRelated);
        public async Task<KeyValueType> GetKeyValueTypeAsync(int id, bool loadRelated = false) => await unitOfWork.KeyValueTypeRepository.FindByFieldAsync(r => r.Id == id, loadRelated);
        public async Task<SelectList> GetSelectListAsync(KeywordType type, bool bringValueAsID = false)
        {
            return await GetSelectListAsync((int)type, bringValueAsID);
        }
        public async Task<SelectList> GetSelectListAsync(int typeId, bool bringValueAsID = false)
        {
            var list = await GetListAsync(typeId);
            if (bringValueAsID)
            {
                return new SelectList(list, nameof(KeyValueLookup.DisplayValue), nameof(KeyValueLookup.DisplayValue));
            }
            return new SelectList(list, nameof(KeyValueLookup.Id), nameof(KeyValueLookup.DisplayValue));
        }
        public async Task<IEnumerable<KeyValueLookup>> GetListAsync(int typeId)
        {
            var list = await unitOfWork.KeyValueLookupRepository.GetListAsync(k => k.KeyValueTypeId == typeId);
            return list.OrderBy(k => k.SortOrder).ThenBy(k => k.DisplayValue);
        }
        public async Task<IEnumerable<KeyValueLookup>> GetListAsync(KeywordType type)
        {
            return await GetListAsync((int)type);
        }
        public async Task<IEnumerable<KeyValueType>> GetKeyValueTypeListAsync()
        {
            var list = await unitOfWork.KeyValueTypeRepository.GetListAsync();
            return list.OrderBy(k => k.Name);
        }

        public async Task<PagedList<KeyValueLookup>> GetPagedListAsync(PagingInfo pageInfo, ListView<KeyValueLookup, KeyValueLookup> listView, Expression<Func<KeyValueLookup, object>> sortColumn)
        {
            int keyVal = Convert.ToInt32(pageInfo.CategoryKey);
            KeyValueType keyValueType = await unitOfWork.KeyValueTypeRepository.FindByFieldAsync(k => k.Id == keyVal);
            if (keyValueType != null)
            {

                listView.DefaultCriteria = a => a.KeyValueTypeId == keyVal;
                listView.ViewTitle = listView.ViewTitle + " - " + keyValueType.Name;
            }
            (string displayCriteria, Expression<Func<KeyValueLookup, bool>> predicate) = listView.GetPredicate(pageInfo);
            int totalCount = await unitOfWork.KeyValueLookupRepository.GetCountAsync(predicate);
            Expression<Func<KeyValueLookup, KeyValueLookup>> selectColumns = m => new KeyValueLookup
            {
                Id = m.Id,
                DisplayValue = m.DisplayValue,
                Code = m.Code,
                SortOrder = m.SortOrder,
                KeyValueTypeId = m.KeyValueTypeId,
                Active = m.Active
            };
            var keyValues = await unitOfWork.KeyValueLookupRepository.GetPagedListAsync(predicate, selectColumns,
                                 sortColumn, null, null, pageInfo.SortOrder, pageInfo.PageSize, pageInfo.Page);
            return new PagedList<KeyValueLookup> { TotalCount = totalCount, Items = keyValues };
        }

        public async Task<IEnumerable<CheckboxListItem>> GetUniqueColumnValuesAsync(PagingInfo pageInfo, ListView<KeyValueLookup, KeyValueLookup> listView, string columnName)
        {
            IEnumerable<CheckboxListItem> models = null;
            (string displayCriteria, Expression<Func<KeyValueLookup, bool>> predicate) = listView.GetPredicate(pageInfo);
            switch (columnName)
            {
                /*
                case "Branch":
                    models = await unitOfWork.KeyValueLookupRepository.GetDistinctListAsync(predicate, x => new CheckboxListItem { Label = x.Branch.Name }, x => x.Label);
                    break;
                case "ServiceType":
                    models = await unitOfWork.KeyValueLookupRepository.GetDistinctListAsync(predicate, x => new CheckboxListItem { Label = x.ServiceType.Name }, x => x.Label);
                    break;
                    */

            }
            return models;
        }

    }
}
using CommonUtil.ListViews;
using DocumentFormat.OpenXml.Spreadsheet;
using JAGCNet.Library.Services.Interfaces;
using JOIN_Data.Extensions;
using JOIN_Data.Models.CoreModels;
using JOIN_Data.Persistence;
using JOIN_Data.Services.Interfaces;
using JOIN_Data.Utils;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Security.Claims;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace JOIN_Data.Services
{
    public class ListViewService : IListViewService
    {
        private readonly IUnitOfWork unitOfWork;
        private readonly IListViewFactory listViewFactory;
        public ListViewService(IUnitOfWork unitOfWork, IListViewFactory listViewFactory)
        {
            this.unitOfWork = unitOfWork;
            this.listViewFactory = listViewFactory;
        }
        public async Task<UserListView> AddAsync(string viewKey, string userKey, CancellationToken cancellationToken = default(CancellationToken))
        {
            var model = new UserListView() { ViewKey = viewKey };
            var view = listViewFactory.GetListView(viewKey);
            var count = 0;
            foreach (var col in view.GetDefaultColumns())
            {
                model.DisplayColumns.Add(new UserDisplayColumn() { ColumnName = col.FieldName, Width = col.Width, SortOrder = count });
                count++;
            }
            count = 0;
            foreach (var col in view.GetExportColumns())
            {
                model.ExportColumns.Add(new UserExportColumn() { ColumnName = col.FieldName, Width = col.Width, SortOrder = count });
                count++;
            }

            AppUtils.SetCommonModelFields(model, userKey);
            await unitOfWork.UserListViewRepository.AddAsync(model);
            await unitOfWork.CompleteAsync(cancellationToken);
            return model;
        }
        public async Task<UserListView> GetModelAsync(string viewKey, string userKey, bool createIfMissing = false)
        {
            var model = await unitOfWork.UserListViewRepository.FindByFieldAsync(u => u.ViewKey == viewKey && u.CreatedById == userKey, true);
            if (model == null && createIfMissing)
                model = await AddAsync(viewKey, userKey);
            return model;
        }

        public async Task<UserListView> UpdateCategorizedColumnAsync(string viewKey, string userKey, string columnName, CancellationToken cancellationToken = default)
        {
            var model = await GetModelAsync(viewKey, userKey, true);
            model.CategorizedColumn = columnName;
            await unitOfWork.CompleteAsync(cancellationToken);
            return model;
        }
        public async Task<UserListView> SortViewTitleAsync(string viewKey, string sourceField, string targetField, string userId, CancellationToken cancellationToken = default(CancellationToken))
        {
            var userView = await GetModelAsync(viewKey, userId);
            userView.DisplayColumns.OrderBy(s => s.SortOrder);

            var source = userView.DisplayColumns.FirstOrDefault(s => s.ColumnName == sourceField);
            var target = userView.DisplayColumns.FirstOrDefault(s => s.ColumnName == targetField);
            if (source != null && target != null)
            {
                if (source.SortOrder > target.SortOrder)
                {
                    var targetSortOrder = target.SortOrder;
                    var sortList = userView.DisplayColumns.Where(s => s.SortOrder >= target.SortOrder && s.SortOrder < source.SortOrder);
                    foreach (var col in sortList)
                    {
                        col.SortOrder++;
                    }
                    source.SortOrder = targetSortOrder;
                }
                else if (source.SortOrder < target.SortOrder)
                {
                    var targetSortOrder = target.SortOrder;
                    var sortList = userView.DisplayColumns.Where(s => s.SortOrder <= target.SortOrder && s.SortOrder > source.SortOrder);
                    foreach (var slide in sortList)
                    {
                        slide.SortOrder--;
                    }
                    source.SortOrder = targetSortOrder;
                }
                AppUtils.SetCommonModelFields(userView, userId);
                unitOfWork.UserListViewRepository.Update(userView);
                await unitOfWork.CompleteAsync(cancellationToken, userId);
            }
            return userView;
        }
        public async Task<UserListView> SortExportColumnAsync(string viewKey, string sourceField, string targetField, string userId, CancellationToken cancellationToken = default(CancellationToken))
        {
            var userView = await GetModelAsync(viewKey, userId);
            userView.ExportColumns.OrderBy(s => s.SortOrder);
            var source = userView.ExportColumns.FirstOrDefault(s => s.ColumnName == sourceField);
            var target = userView.ExportColumns.FirstOrDefault(s => s.ColumnName == targetField);
            if (source != null && target != null)
            {
                if (source.SortOrder > target.SortOrder)
                {
                    var targetSortOrder = target.SortOrder;
                    var sortList = userView.ExportColumns.Where(s => s.SortOrder >= target.SortOrder && s.SortOrder < source.SortOrder);
                    foreach (var col in sortList)
                    {
                        col.SortOrder++;
                    }
                    source.SortOrder = targetSortOrder;
                }
                else if (source.SortOrder < target.SortOrder)
                {
                    var targetSortOrder = target.SortOrder;
                    var sortList = userView.ExportColumns.Where(s => s.SortOrder <= target.SortOrder && s.SortOrder > source.SortOrder);
                    foreach (var slide in sortList)
                    {
                        slide.SortOrder--;
                    }
                    source.SortOrder = targetSortOrder;
                }
                AppUtils.SetCommonModelFields(userView, userId);
                unitOfWork.UserListViewRepository.Update(userView);
                await unitOfWork.CompleteAsync(cancellationToken, userId);
            }
            return userView;
        }
        public async Task<UserListView> UpdateColumnWidthAsync(string viewKey, string sourceField, int width, string userId, CancellationToken cancellationToken = default(CancellationToken))
        {
            var userView = await GetModelAsync(viewKey, userId);
            var col = userView.DisplayColumns.FirstOrDefault(c => c.ColumnName == sourceField);
            if (col != null)
            {
                col.Width = width;
                unitOfWork.UserListViewRepository.Update(userView);
                await unitOfWork.CompleteAsync(cancellationToken, userId);
            }
            return userView;

        }
        public async Task<UserListView> AddFieldAsync(string viewKey, string field, string type, string userId, CancellationToken cancellationToken = default(CancellationToken))
        {
            var userView = await GetModelAsync(viewKey, userId);
            if (type == "display")
            {
                var col = userView.DisplayColumns.FirstOrDefault(c => c.ColumnName == field);
                if (col == null)
                {
                    var view = listViewFactory.GetListView(viewKey);
                    var vc = view.GetDisplayableColumns().FirstOrDefault(c => c.FieldName == field);
                    if (vc != null)
                    {
                        var displayCol = new UserDisplayColumn() { ColumnName = vc.FieldName, Width = vc.Width, SortOrder = userView.DisplayColumns.Count };
                        userView.DisplayColumns.Add(displayCol);
                    }

                }
            }
            else
            {
                var col = userView.ExportColumns.FirstOrDefault(c => c.ColumnName == field);
                if (col == null)
                {
                    var view = listViewFactory.GetListView(viewKey);
                    var vc = view.GetExportColumns().FirstOrDefault(c => c.FieldName == field);
                    if (vc != null)
                    {
                        var displayCol = new UserExportColumn() { ColumnName = vc.FieldName, Width = vc.Width, SortOrder = userView.ExportColumns.Count };
                        userView.ExportColumns.Add(displayCol);
                    }
                }
            }
            unitOfWork.UserListViewRepository.Update(userView);
            await unitOfWork.CompleteAsync(cancellationToken, userId);
            return userView;
        }

        public async Task<UserListView> RemoveFieldAsync(string viewKey, string field, string type, string userId, CancellationToken cancellationToken = default(CancellationToken))
        {
            var userView = await GetModelAsync(viewKey, userId);
            if (type == "display")
            {
                var col = userView.DisplayColumns.FirstOrDefault(c => c.ColumnName == field);
                if (col != null)
                {
                    userView.DisplayColumns.Remove(col);
                    var count = 0;
                    foreach (var dc in userView.DisplayColumns.OrderBy(c => c.SortOrder))
                    {
                        dc.SortOrder = count;
                        count++;
                    }
                }
            }
            else
            {
                var col = userView.ExportColumns.FirstOrDefault(c => c.ColumnName == field);
                if (col != null)
                {
                    userView.ExportColumns.Remove(col);
                    var count = 0;
                    foreach (var dc in userView.ExportColumns.OrderBy(c => c.SortOrder))
                    {
                        dc.SortOrder = count;
                        count++;
                    }
                }
            }
            unitOfWork.UserListViewRepository.Update(userView);
            await unitOfWork.CompleteAsync(cancellationToken, userId);

            return userView;
        }

        public async Task<UserListView> CheckAllAsync(string viewKey, string type, string userId, CancellationToken cancellationToken = default)
        {
            var userView = await GetModelAsync(viewKey, userId);
            var view = listViewFactory.GetListView(viewKey);
            if (type == "display")
            {
                var vc = view.GetDisplayableColumns();
                foreach (var dc in vc)
                {
                    if (!userView.DisplayColumns.Any(c => c.ColumnName == dc.FieldName))
                    {
                        var displayCol = new UserDisplayColumn() { ColumnName = dc.FieldName, Width = dc.Width, SortOrder = userView.DisplayColumns.Count };
                        userView.DisplayColumns.Add(displayCol);
                    }
                }
            }
            else
            {
                var vc = view.GetExportColumns();
                var sortIndex = 0;
                foreach (var ec in userView.ExportColumns.OrderBy(c => c.SortOrder))
                {
                    ec.SortOrder = sortIndex;
                    sortIndex++;
                }
                foreach (var dc in vc)
                {
                    if (!userView.ExportColumns.Any(c => c.ColumnName == dc.FieldName))
                    {
                        var exportCol = new UserExportColumn() { ColumnName = dc.FieldName, Width = dc.Width, SortOrder = sortIndex };
                        userView.ExportColumns.Add(exportCol);
                        sortIndex++;
                    }
                }
            }
            unitOfWork.UserListViewRepository.Update(userView);
            await unitOfWork.CompleteAsync(cancellationToken, userId);
            return userView;
        }

        public async Task<UserListView> UncheckAllAsync(string viewKey, string type, string userId, CancellationToken cancellationToken = default)
        {
            var userView = await GetModelAsync(viewKey, userId);
            var view = listViewFactory.GetListView(viewKey);
            if (type == "display")
            {
                userView.DisplayColumns.Clear();
            }
            else
            {
                foreach (var col in view.GetExportColumns())
                {
                    var expCol = userView.ExportColumns.FirstOrDefault(c => c.ColumnName == col.FieldName);
                    if (expCol != null && !view.IsRequiredColumn(col.FieldName))
                    {
                        userView.ExportColumns.Remove(expCol);
                    }
                }
            }
            unitOfWork.UserListViewRepository.Update(userView);
            await unitOfWork.CompleteAsync(cancellationToken, userId);
            return userView;
        }
    }
}
using CommonUtil.ListViews;
using JAGCNet.Library.Services.Interfaces;
using JOIN_Data.Enums;
using JOIN_Data.Models.CoreModels;
using JOIN_Data.Models.UtilityModels;
using JOIN_Data.Persistence;
using JOIN_Data.Repositories;
using JOIN_Data.Services.Interfaces;
using JOIN_Data.Utils;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

namespace JOIN_Data.Services
{
    public class PresentationService : IPresentationService
    {
        private readonly IUnitOfWork unitOfWork;
        private Expression<Func<Presentation, Presentation>> listSelectColumns;
        private IBaseRepository<Presentation> baseRepository;
        public PresentationService(IUnitOfWork unitOfWork)
        {
            this.unitOfWork = unitOfWork;
            baseRepository = unitOfWork.PresentationRepository;
            listSelectColumns = m => new Presentation
            {
                Id = m.Id,
                Title = m.Title,
                Key = m.Key,
                DateCreated = m.DateCreated
            };
        }
        public async Task<int> AddAsync(Presentation model, string userId, CancellationToken cancellationToken = default(CancellationToken))
        {
            AppUtils.SetCommonModelFields(model, userId);
            await baseRepository.AddAsync(model);
            await unitOfWork.CompleteAsync(cancellationToken);
            return model.Id;
        }

        public async Task<bool> UpdateAsync(Presentation model, string userId, CancellationToken cancellationToken = default(CancellationToken))
        {
            var recordInDb = await GetModelAsync(model.Id);
            if (recordInDb != null)
            {
                recordInDb.Title = model.Title;

                AppUtils.SetCommonModelFields(model, userId);
                baseRepository.Update(recordInDb);
            }
            return await unitOfWork.CompleteAsync(cancellationToken, userId) > 0;
        }

        public async Task<Presentation> GetModelAsync(int id, bool loadRelated = false) => await baseRepository.FindByFieldAsync(r => r.Id == id, loadRelated);
        public async Task<Presentation> GetModelAsync(string key, bool loadRelated = false) => await baseRepository.FindByFieldAsync(r => r.Key.ToString() == key, loadRelated);



        public async Task<PagedList<Presentation>> GetPagedListAsync(PagingInfo pageInfo, ListView<Presentation, Presentation> listView, Expression<Func<Presentation, object>> sortColumn)
        {

            (string displayCriteria, Expression<Func<Presentation, bool>> predicate) = listView.GetPredicate(pageInfo);
            int totalCount = await unitOfWork.PresentationRepository.GetCountAsync(predicate);
            var recordList = await unitOfWork.PresentationRepository.GetPagedListAsync(predicate, listSelectColumns,
                                 sortColumn, null, null, pageInfo.SortOrder, pageInfo.PageSize, pageInfo.Page);
            return new PagedList<Presentation>
            {
                TotalCount = totalCount,
                Items = recordList
            };
        }



    }
}
using JOIN_Data.Models.CoreModels;
using JOIN_Data.Models.ViewModels;
using JOIN_Data.Persistence;
using JOIN_Data.Services.Interfaces;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace JOIN_Data.Services;

public class ServiceService : IServiceService
{
    private IUnitOfWork _unitOfWork;
    public ServiceService(IUnitOfWork _unitOfWork)
    {
        this._unitOfWork = _unitOfWork;
    }

    public async Task<List<SectionViewMode>> GetSectionsByAppId(int appId)
    {
        var _sect = _unitOfWork.SectionRepository.GetQueryable().Where(t => t.AppId == appId);
        var sections = await _sect.Select(t => new SectionViewMode
        {
            SectionName = t.Name,
            SectionId = t.Id,
            isActive = t.IsActive,
            CategoriesCount = t.Categories.Count(),
            Categories = t.Categories.Select(c => new CategoryViewMode
            {
                Id = c.Id,
                Name = c.Name,
                isActive = c.IsActive,
                QuestionsCount = c.Questions.Count()
            }).ToList()
        }).ToListAsync();

        return sections;
    }
}
using CommonUtil.ListViews;
using JAGCNet.Library.Services.Interfaces;
using JOIN_Data.Extensions;
using JOIN_Data.Models.CoreModels;
using JOIN_Data.Persistence;
using JOIN_Data.Services.Interfaces;
using JOIN_Data.Utils;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Security.Claims;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace Calendars.Data.Services
{
    public class StarterService : IStarterService
    {
        private readonly IUnitOfWork unitOfWork;
        private readonly IJAGCProfilesService profilesService;
        private readonly IAuditLogService logService;
        public StarterService(IUnitOfWork unitOfWork, IJAGCProfilesService profilesService, IAuditLogService logService)
        {
            this.unitOfWork = unitOfWork;
            this.profilesService = profilesService;
            this.logService = logService;
        }
        /*
        public async Task<int> AddAsync(Calendar model, string userId, CancellationToken cancellationToken = default(CancellationToken))
        {
            AppUtils.SetCommonModelFields(model, userId);
            await unitOfWork.CalendarRepository.AddAsync(model);
            await unitOfWork.CompleteAsync(cancellationToken);
            return model.Id;
        }
        public async Task<bool> UpdateSettingsAsync(Calendar model, string userId, CancellationToken cancellationToken = default(CancellationToken))
        {
            Calendar recordInDb = await GetUpdatedModel(model, userId);
            if (recordInDb != null)
            {
                unitOfWork.CalendarRepository.Update(recordInDb);
            }
            return await unitOfWork.CompleteAsync(cancellationToken, userId) > 0;
        }
        private async Task<Calendar> GetUpdatedModel(Calendar model, string userId)
        {
            Calendar recordInDb = await GetModelAsync(model.Key.ToString());
            if (recordInDb != null)
            {
                recordInDb.Title = model.Title;
                recordInDb.Active = model.Active;
                AppUtils.SetCommonModelFields(recordInDb, userId);
                return recordInDb;
            }
            return null;
        }
        public async Task<bool> IsOwnerAsync(int calendarId, ClaimsPrincipal user)
        {
            if (user.IsCalendarCreator())
                return true;
            var owners = await unitOfWork.CalendarOwnerRepository.GetListAsync(o => o.CalendarId == calendarId);
            return owners.Any(o => o.JAGCProfileUUID == user.GetJAGCProfileUUID());
        }
        public async Task<bool> IsOwnerAsync(string calendarKey, string jagcProfileUUID)
        {
            var record = await GetModelWithOwnersAsync(calendarKey);
            return record.Owners.Any(o => o.JAGCProfileUUID == jagcProfileUUID);
        }
        public bool IsOwner(Calendar calendar, string jagcProfileUUID)
        {
            return calendar.Owners.Any(o => o.JAGCProfileUUID == jagcProfileUUID);
        }
        public async Task<int> AddOwnerAsync(int calendarId, string jagcProfileUUID, string userId, CancellationToken cancellationToken = default(CancellationToken))
        {
            var owner = new CalendarOwner() { CalendarId = calendarId, JAGCProfileUUID = jagcProfileUUID };
            AppUtils.SetCommonModelFields(owner, userId);
            await unitOfWork.CalendarOwnerRepository.AddAsync(owner);
            var ownerProfile = await profilesService.GetJAGCProfileByUUIDAsync(owner.JAGCProfileUUID);
            await logService.AddMessageAsync(owner.CalendarId, "Calendar", userId, ownerProfile.FullName + " - Added as owner ");
            await unitOfWork.CompleteAsync(cancellationToken);
            return owner.Id;
        }
        public async Task<int> GetOwnershipCountAsync(string jagcProfileUUID, CancellationToken cancellationToken = default(CancellationToken))
        {
            return await unitOfWork.CalendarOwnerRepository.GetCountAsync(o => o.JAGCProfileUUID == jagcProfileUUID);
        }
        public async Task<bool> DeleteOwnerAsync(CalendarOwner owner, string userId, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (owner != null)
            {
                unitOfWork.CalendarOwnerRepository.Remove(owner);
                var ownerProfile = await profilesService.GetJAGCProfileByUUIDAsync(owner.JAGCProfileUUID);
                await logService.AddMessageAsync(owner.CalendarId, "Calendar", userId, "Deleted owner " + ownerProfile.FullName);
            }
            var deleted = await unitOfWork.CompleteAsync(cancellationToken);
            return deleted > 0;
        }

        public async Task<bool> UpdateThemeClassAsync(Calendar model, string userId, CancellationToken cancellationToken = default(CancellationToken))
        {
            Calendar recordInDb = await GetModelAsync(model.Id);
            if (recordInDb != null)
            {
                recordInDb.ThemeClass = model.ThemeClass;
                AppUtils.SetCommonModelFields(model, userId);
                unitOfWork.CalendarRepository.Update(recordInDb);
            }
            return await unitOfWork.CompleteAsync(cancellationToken, userId) > 0;
        }
        public async Task<Calendar> GetModelAsync(int id, bool loadRelated = false) => await unitOfWork.CalendarRepository.FindByFieldAsync(r => r.Id == id, loadRelated);
        public async Task<Calendar> GetModelAsync(string key, bool loadRelated = false) => await unitOfWork.CalendarRepository.FindByFieldAsync(r => r.Key.ToString() == key, loadRelated);
        public async Task<Calendar> GetModelWithOwnersAsync(string key)
        {
            return await unitOfWork.CalendarRepository.FindByFieldAsync(p => p.Key.ToString() == key, new List<string>() { "Owners" });
        }
        public async Task<PagedList<Calendar>> GetPagedListAsync(PagingInfo pageInfo, ListView<Calendar, Calendar> listView, Expression<Func<Calendar, object>> sortColumn)
        {
            (string displayCriteria, Expression<Func<Calendar, bool>> predicate) = listView.GetPredicate(pageInfo);
            int totalCount = await unitOfWork.CalendarRepository.GetCountAsync(predicate);

            Expression<Func<Calendar, Calendar>> selectColumns = m => new Calendar
            {
                Id = m.Id,
                Title = m.Title,
                Key = m.Key,
                DateCreated = m.DateCreated,
                Active = m.Active
            };
            var recordList = await unitOfWork.CalendarRepository.GetPagedListAsync(predicate, selectColumns,
                                 sortColumn, pageInfo.SortOrder, pageInfo.PageSize, pageInfo.Page);
            return new PagedList<Calendar>
            {
                TotalCount = totalCount,
                Items = recordList
            };
        }

        // Task<PagedList<PresentationOwnerViewModel>> GetPresentationOwnerPagedListAsync(PagingInfo pageInfo, ListView<PresentationOwnerViewModel, PresentationOwnerViewModel> listView, Expression<Func<PresentationOwnerViewModel, object>> sortColumn);
        */
    }
}
using CommonUtil.ListViews;
using JOIN_Data.Models.CoreModels;
using JOIN_Data.Models.UtilityModels;
using JOIN_Data.Models.ViewModels;
using JOIN_Data.Persistence;
using JOIN_Data.Services.Interfaces;
using JOIN_Data.Utils;
using Microsoft.AspNetCore.Mvc.Rendering;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;

namespace JOIN_Data.Services
{
    public class UserService : IUserService
    {
        private readonly JOIN_Data.Persistence.IUnitOfWork unitOfWork;
        public UserService(IUnitOfWork unitOfWork)
        {
            this.unitOfWork = unitOfWork;
        }
        public async Task<int> AddAsync(UserSetting model, string userId, CancellationToken cancellationToken = default(CancellationToken))
        {
            AppUtils.SetCommonModelFields(model, userId);
            await unitOfWork.UserSettingRepository.AddAsync(model);
            await unitOfWork.CompleteAsync(cancellationToken);
            return model.Id;
        }
        public async Task<bool> UpdateAsync(UserSetting model, string userId, CancellationToken cancellationToken = default(CancellationToken))
        {
            UserSetting settingInDb = await GetModelAsync(model.Id);
            if (settingInDb != null)
            {
                settingInDb.ManageKeywords = model.ManageKeywords;
                settingInDb.ManageUsers = model.ManageUsers;
                settingInDb.AllowRunReports = model.AllowRunReports;
                settingInDb.PreviewEnabled = model.PreviewEnabled;
                settingInDb.PreviewBarPosition = model.PreviewBarPosition;

                AppUtils.SetCommonModelFields(model, userId);
                unitOfWork.UserSettingRepository.Update(settingInDb);
            }
            await unitOfWork.CompleteAsync(cancellationToken, userId);
            return true;
        }
        public async Task<bool> ToggleActive(string personId, string userId, CancellationToken cancellationToken = default(CancellationToken))
        {
            UserSetting settingInDb = await unitOfWork.UserSettingRepository.FindByFieldAsync(u => u.JAGCProfileUUID == personId);

            if (settingInDb != null)
            {
                settingInDb.Active = !settingInDb.Active;
                AppUtils.SetCommonModelFields(settingInDb, userId);
                unitOfWork.UserSettingRepository.Update(settingInDb);
            }
            await unitOfWork.CompleteAsync(cancellationToken, userId);
            return true;
        }
        public async Task<UserSetting> GetModelAsync(int id, bool loadRelated = false) => await unitOfWork.UserSettingRepository.FindByFieldAsync(r => r.Id == id, loadRelated);
        public async Task<UserSetting> GetSettingByJAGCProfileUUIDAsync(string id, bool loadRelated = false) => await unitOfWork.UserSettingRepository.FindByFieldAsync(r => r.JAGCProfileUUID == id, loadRelated);

        public async Task<PagedList<UserListViewModel>> GetPagedListAsync(PagingInfo pageInfo, ListView<UserListViewModel, UserListViewModel> listView, Expression<Func<UserListViewModel, object>> sortColumn)
        {
            (string displayCriteria, Expression<Func<UserListViewModel, bool>> predicate) = listView.GetPredicate(pageInfo);
            int totalCount = await unitOfWork.UserQueryRepository.GetCountAsync(predicate);

            var users = await unitOfWork.UserQueryRepository.GetPagedListAsync(predicate,
                sortColumn, null, null, pageInfo.SortOrder, pageInfo.PageSize, pageInfo.Page);
            return new PagedList<UserListViewModel> { TotalCount = totalCount, Items = users };
        }

        public async Task<IEnumerable<CheckboxListItem>> GetUniqueColumnValuesAsync(PagingInfo pageInfo, ListView<UserListViewModel, UserListViewModel> listView, string columnName)
        {
            IEnumerable<CheckboxListItem> models = null;
            (string displayCriteria, Expression<Func<UserListViewModel, bool>> predicate) = listView.GetPredicate(pageInfo);

            switch (columnName)
            {
                case "DutyTitle":
                    models = await unitOfWork.UserQueryRepository.GetDistinctListAsync(listView.DefaultCriteria, x => new CheckboxListItem { Label = x.DutyTitle }, x => x.Label);
                    break;
            }
            FieldFilter filter = pageInfo.FieldFilters.FirstOrDefault(f => f.FieldName == columnName);
            if (filter != null)
            {
                foreach (var val in filter.Values)
                {
                    var check = models.FirstOrDefault(f => f.Label == val);
                    if (check != null)
                    {
                        check.IsSelected = true;
                    }
                }
            }

            return models;
        }
    }
}
namespace JOIN_Data.Utils
{
    public class AppConstants
    {
        public const int RECORDS_PER_PAGE = 20;
        public const string CASE_STATUS_OPEN = "Open";
        public const string CASE_STATUS_CLOSED = "Closed";
        public const string CUR_USER_CACHE_KEY = "CurrentUser";
        public const string CUR_USER_CLAIMS_CACHE_KEY = "CurrentUserClaims";
        public const int DEV_TEST_USER_ID = 1293030037;
        public const string APPLICATION_CODE = "JOINBoard";
    }
    public static class LeftNavConstants
    {

        public const string USERS = "Users";
        public const string KEYWORDS = "KeyValues";
        public const string ERROR_LOGS = "ErrorLogs";
        public const string HOME = "Home";
        public const string Administration = "Administration";
        public const string Applications = "Applications";
        public const string Board = "Board";
        public const string Sections = "Sections";
        public const string Category = "Category";
        public const string Question = "Question";
        public const string ScoreValidation = "Validation";
        public const string Applicants = "Applicants";
    }
    public static class AppManagementNavConstants
    {
        public const string Applications = "Applications";
        public const string Board = "Board";
        public const string Sections = "Sections";
        public const string Category = "Category";
        public const string Question = "Question";
        public const string Validation = "Validation";
    }
    public static class AppStatus
    {
        public const string Active = "Active";
        public const string Draft = "Draft";
        public const string Disactive = "Disactive";
    }

    public static class ApplicantStatus
    {
        public const string Expired = "Expired";
        public const string Draft = "Draft";
        public const string Review = "Review";
        public const string Disapproved = "Disapproved";
        public const string Approved = "Approved";
    }

    public static class AuthConstants
    {
        public const string POLICY_MANAGE_USERS = "ManageUsersPolicy";
        public const string POLICY_MANAGE_KEYWORDS = "ManageKeywordsPolicy";
        public const string POLICY_CREATE_PRESENTATION = "CreatePresentationPolicy";
        public const string POLICY_CREATE_SURVEY = "CreateSurveyPolicy";
        public const string POLICY_EDIT_PRESENTATION = "EditPresentationPolicy";
        public const string POLICY_EDIT_SURVEY = "EditSurveyPolicy";

        public const string POLICY_ACTIVE_USER = "ActiveUserPolicy";
        public const string POLICY_READ_USERS = "ReadUsersPolicy";
        public const string POLICY_READ_KEYWORDS = "ReadKeywordsPolicy";

    }

    public static class ClaimConstants
    {
        public const string MANAGE_USERS = "ManageUsers";
        public const string MANAGE_KEYWORDS = "ManageKeywords";
        public const string RUN_REPORTS = "AllowRunReports";
        public const string ACTIVE_USER = "Active";
        public const string JAGCNET_MEMBER = "JAGCNetMember";
        public const string GLOBAL_ADMIN = "GlobalAdmin";
        public const string GLOBAL_READER = "GlobalReader";

        public const string DOD_ID = "DODID";
        public const string RANK = "Rank";
        public const string APPLICATION_USER_ID = "ApplicationUserId";
        public const string JAGCPROFILE_UUID = "JAGCProfileUUID";
        public const string LAST_LOGIN = "LastLogin";
        public const string IS_ITD_USER = "IsITDUser";
        public const string APP_PROFILE_ID = "ApplicationProfileId";
    }
    public static class ModalSizeConstants
    {
        public const string DEFAULT = "Default";
        public const string SMALL = "Small";
        public const string LARGE = "Large";
        public const string XLARGE = "XLarge";
    }

    public static class SessionKeyConstants
    {
        public const string USER_SETTING = "UserSetting";
    }

    public static class ListViewConstants
    {
        public const string SORT_ORDER_ASC = "asc";
        public const string SORT_ORDER_DESC = "desc";
        public const int RECORDS_PER_PAGE = 20;
    }
    public static class IconConstants
    {
        public const string ACTIVE_ICON = "<i class='bi bi-check-circle text-success'></i>";
        public const string INACTIVE_ICON_SECONDARY = "<i class='bi bi-x-circle text-secondary'></i>";
        public const string INACTIVE_ICON_DANGER = "<i class='bi bi-x-circle text-danger'></i>";
    }
}
using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Spreadsheet;
using JAGCNet.Library.Models;
using JOIN_Data.Enums;
using JOIN_Data.Models.UtilityModels;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Caching.Distributed;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using System;
using System.IO;
using System.Linq;
using System.Security.Claims;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace JOIN_Data.Utils
{
    public static class AppUtils
    {
        public static string GetLeftNavClass(Object viewData, string menuKey)
        {
            if (viewData == null)
            {
                return "";
            }

            return menuKey.Equals(viewData.ToString()) ? "active" : "";
        }
        public static string GetNavTabClass(string viewDataVal, string valToCheck)
        {
            return viewDataVal.Equals(valToCheck) ? "nav-item active" : "nav-item";
        }
        public static string GetKeywordNavClass(Object currentType, KeywordType buttonType)
        {
            return Enum.Parse(typeof(KeywordType), currentType.ToString()).Equals(buttonType) ? "text-left btn-action btn btn-secondary btn-block " : "text-left btn-action btn-light btn btn-block";
        }

        public static void SetCommonModelFields(ICommonModelFields model, JAGCProfile currentUser, bool newModel)
        {
            if (currentUser != null)
            {
                if (newModel)
                {
                    model.DateCreated = DateTime.UtcNow;
                    model.CreatedById = currentUser.UUID;
                }
                model.DateModified = DateTime.UtcNow;
                model.ModifiedById = currentUser.UUID;
            }
        }
        public static void SetCommonModelFields(ICommonModelFields model, string userId)
        {
            if (!String.IsNullOrWhiteSpace(userId))
            {
                if (model.Id == 0)
                {
                    model.DateCreated = DateTime.UtcNow;
                    model.CreatedById = userId;
                }
                model.DateModified = DateTime.UtcNow;
                model.ModifiedById = userId;
            }
        }

        public static string GetCurrentUserId(ClaimsPrincipal user)
        {
            if (user == null)
            {
                return "";
            }

            var claim = user.FindFirst(x => x.Type == ClaimConstants.JAGCPROFILE_UUID);
            return (claim != null) ? claim.Value : "";
        }
        public static string GetHTMLDisplayValue(string rawValue)
        {
            if (String.IsNullOrEmpty(rawValue))
            {
                return "";
            }
            var htmlValue = rawValue.Replace(System.Environment.NewLine, "<br>");
            htmlValue = Regex.Replace(htmlValue, @"\s{2,}", m => string.Concat(Enumerable.Repeat("&nbsp;", m.Length)));
            return htmlValue;

        }
        public static string GetFullPath(IConfiguration config, string fileFolder, bool createIfMissing = false)
        {
            var fileRoot = config.GetValue<String>("AttachmentRootFolder");
            var fullPath = $@"{fileRoot}\{fileFolder}";
            if (createIfMissing && !Directory.Exists(fullPath))
            {
                Directory.CreateDirectory(fullPath);
                return fullPath;
            }
            else if (Directory.Exists(fullPath))
            {
                return fullPath;
            }
            return null;
        }
        public static FileStreamResult StreamFile(string filePath)
        {
            var stream = new FileStream(filePath, FileMode.Open);
            return new FileStreamResult(stream, "application/octet-stream")
            {
                FileDownloadName = Path.GetFileName(filePath)
            };
        }

        public static bool DeleteFile(string filePath)
        {
            if (File.Exists(filePath))
            {
                File.Delete(filePath);
            }
            return true;
        }


        public static bool DeleteFolder(IConfiguration config, string filePath)
        {
            return DeleteFolder(GetFullPath(config, filePath));

        }
        public static bool DeleteFolder(string filePath)
        {
            if (Directory.Exists(filePath))
            {
                Directory.Delete(filePath, true);
            }
            return true;
        }
        public static FileInfo GetFirstFileInfo(IConfiguration config, string path)
        {
            return GetFirstFileInfo(AppUtils.GetFullPath(config, path));
        }
        public static FileInfo GetFirstFileInfo(string fileFolder)
        {

            if (Directory.Exists(fileFolder))
            {
                DirectoryInfo directory = new DirectoryInfo(fileFolder);
                if (directory.GetFiles().Count() > 0)
                {
                    return directory.GetFiles().FirstOrDefault();
                }
            }
            return null;
        }
        public static string GetFirstFileName(IConfiguration config, string path)
        {
            return GetFirstFileName(GetFullPath(config, path));
        }
        public static string GetFirstFileName(string fileFolder)
        {
            if (Directory.Exists(fileFolder))
            {
                string[] files = Directory.GetFiles(fileFolder);
                if (files.Count() > 0)
                {
                    return Path.GetFileName(files[0]);
                }
            }
            return null;
        }

        public static async Task<string> AddFile(IConfiguration config, string path, IFormFile file, bool deleteAllExisting = false)
        {
            string fName = Path.GetFileName(file.FileName);
            var fileFoler = AppUtils.GetFullPath(config, path, true);
            if (fileFoler != null && deleteAllExisting)
            {
                //Delete any existing Files
                DirectoryInfo directory = new DirectoryInfo(fileFoler);
                foreach (FileInfo f in directory.GetFiles())
                {
                    f.Delete();
                }
            }
            string uniqueFileName = GetUniqueFileName(fileFoler, fName);
            var fileName = $@"{fileFoler}\{uniqueFileName}";
            if (!File.Exists(fileName))
            {
                using (var stream = new FileStream(fileName, FileMode.Create))
                {
                    await file.CopyToAsync(stream);
                }
            }
            return uniqueFileName;
        }
        public static string GetUniqueFileName(string fileFolder, string fileName)
        {
            if (!File.Exists($@"{fileFolder}\{fileName}"))
            {
                return fileName;
            }
            bool found = true;
            int iCount = 1;
            string fName = Path.GetFileNameWithoutExtension(fileName);
            var extention = Path.GetExtension(fileName);
            while (found)
            {
                string fileToCheck = $@"{fName}_{iCount}{extention}";
                if (!File.Exists($@"{fileFolder}\{fileToCheck}"))
                {
                    fName = fileToCheck;
                    found = false;
                }
                else
                {
                    iCount++;
                }
            }
            return fName;
        }
        public static void SetObjectAsJson(ISession session, string key, object value)
        {
            session.SetString(key, JsonConvert.SerializeObject(value));
        }
        public static T GetObjectFromJson<T>(string key, ISession session)
        {
            var value = session.GetString(key);
            return value == null ? default(T) : JsonConvert.DeserializeObject<T>(value.ToString());

        }
        public static WorkbookStylesPart GetWorkbookStylesPart(SpreadsheetDocument spreadsheetDocument)
        {
            var stylesPart = spreadsheetDocument.WorkbookPart.AddNewPart<WorkbookStylesPart>();
            stylesPart.Stylesheet = new Stylesheet();

            // blank font list
            stylesPart.Stylesheet.Fonts = new Fonts();
            stylesPart.Stylesheet.Fonts.Count = 2;
            stylesPart.Stylesheet.Fonts.AppendChild(new Font());
            stylesPart.Stylesheet.Fonts.AppendChild(new Font() { Bold = new Bold() });


            // create fills
            stylesPart.Stylesheet.Fills = new Fills();

            // create a solid grey fill
            var greyFill = new PatternFill() { PatternType = PatternValues.Solid };
            greyFill.ForegroundColor = new ForegroundColor { Rgb = HexBinaryValue.FromString("E8E5E4") };
            greyFill.BackgroundColor = new BackgroundColor { Indexed = 64 };

            stylesPart.Stylesheet.Fills.AppendChild(new Fill { PatternFill = new PatternFill { PatternType = PatternValues.None } }); // required, reserved by Excel
            stylesPart.Stylesheet.Fills.AppendChild(new Fill { PatternFill = new PatternFill { PatternType = PatternValues.Gray125 } }); // required, reserved by Excel
            stylesPart.Stylesheet.Fills.AppendChild(new Fill { PatternFill = greyFill });
            stylesPart.Stylesheet.Fills.Count = 3;

            // blank border list
            stylesPart.Stylesheet.Borders = new Borders();
            stylesPart.Stylesheet.Borders.Count = 1;
            stylesPart.Stylesheet.Borders.AppendChild(new Border());

            // blank cell format list
            stylesPart.Stylesheet.CellStyleFormats = new CellStyleFormats();
            stylesPart.Stylesheet.CellStyleFormats.Count = 1;
            stylesPart.Stylesheet.CellStyleFormats.AppendChild(new CellFormat());

            // cell format list
            stylesPart.Stylesheet.CellFormats = new CellFormats();
            // empty one for index 0, seems to be required
            stylesPart.Stylesheet.CellFormats.AppendChild(new CellFormat());
            // cell format references style format 0, font 0, border 0, fill 2 and applies the fill
            stylesPart.Stylesheet.CellFormats.AppendChild(new CellFormat { FormatId = 0, FontId = 1, BorderId = 0, FillId = 2, ApplyFill = true }).AppendChild(new Alignment { Horizontal = HorizontalAlignmentValues.Left });
            stylesPart.Stylesheet.CellFormats.AppendChild(new CellFormat { FormatId = 0, FontId = 1, BorderId = 0, FillId = 0, ApplyFill = false }).AppendChild(new Alignment { Horizontal = HorizontalAlignmentValues.Left });
            stylesPart.Stylesheet.CellFormats.Count = 3;

            stylesPart.Stylesheet.Save();

            return stylesPart;
        }
    }
}
using Microsoft.AspNetCore.Mvc.Rendering;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace JOIN_Data.Utils
{
    public static class LookupUtils
    {
        public static SelectList GetSelectList<KeyValueLookup>(IEnumerable<KeyValueLookup> lookupList)
        {
            if (lookupList == null)
                return null;
            return new SelectList(lookupList, "Id", "DisplayValue");

        }

        public static SelectList GetSelectList<KeyValueLookup>(IEnumerable<KeyValueLookup> lookupList, int defaultValue)
        {
            if (lookupList == null)
                return null;
            return new SelectList(lookupList, "Id", "DisplayValue", defaultValue);

        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;

namespace JOIN_Data.Utils
{
    public static class PredicateBuilder
    {

        public static Expression<T> Compose<T>(this Expression<T> first, Expression<T> second, Func<Expression, Expression, Expression> merge)
        {

            // build parameter map (from parameters of second to parameters of first)
            var map = first.Parameters.Select((f, i) => new { f, s = second.Parameters[i] }).ToDictionary(p => p.s, p => p.f);

            // replace parameters in the second lambda expression with parameters from the first
            var secondBody = ParameterRebinder.ReplaceParameters(map, second.Body);

            // apply composition of lambda expression bodies to parameters from the first expression 
            return Expression.Lambda<T>(merge(first.Body, secondBody), first.Parameters);

        }


        public static Expression<Func<T, bool>> AndPredicate<T>(this Expression<Func<T, bool>> first, Expression<Func<T, bool>> second)
        {
            if (second == null)
            {
                return first;
            }
            return first.Compose(second, Expression.And);
        }



        public static Expression<Func<T, bool>> OrPredicate<T>(this Expression<Func<T, bool>> first, Expression<Func<T, bool>> second)
        {
            if (second == null)
            {
                return first;
            }
            return first.Compose(second, Expression.Or);

        }




        public class ParameterRebinder : ExpressionVisitor
        {

            private readonly Dictionary<ParameterExpression, ParameterExpression> map;



            public ParameterRebinder(Dictionary<ParameterExpression, ParameterExpression> map)
            {

                this.map = map ?? new Dictionary<ParameterExpression, ParameterExpression>();

            }



            public static Expression ReplaceParameters(Dictionary<ParameterExpression, ParameterExpression> map, Expression exp)
            {

                return new ParameterRebinder(map).Visit(exp);

            }



            protected override Expression VisitParameter(ParameterExpression p)
            {

                ParameterExpression replacement;

                if (map.TryGetValue(p, out replacement))
                {

                    p = replacement;

                }

                return base.VisitParameter(p);

            }
        }
    }

}
